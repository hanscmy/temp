{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0},{"_id":"themes/next/source/images/my_avatar.jpg","path":"images/my_avatar.jpg","modified":0},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0},{"_id":"themes/landscape/source/css/images/banner_bak.jpg","path":"css/images/banner_bak.jpg","modified":0},{"_id":"themes/landscape/source/css/images/1.jpg","path":"css/images/1.jpg","modified":0},{"_id":"themes/landscape/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0},{"_id":"themes/landscape/source/css/images/banner3.jpg","path":"css/images/banner3.jpg","modified":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1}],"Cache":[{"_id":"source/CNAME","shasum":"a56016cabb090cb83b65a704dad37fe8d66eac72","modified":1460454370574},{"_id":"source/_posts/2016-02-23-装饰模式.md","shasum":"2d01fd21242cf37eb657a2efa77f6d0dca88ffd4","modified":1456216754552},{"_id":"source/_posts/2016-02-23-代理模式.md","shasum":"72de5e108f125106a01c84de0d23b653d8a2873b","modified":1456216668904},{"_id":"source/_posts/2016-02-26-Maven.md","shasum":"00eadb2f2dca440cecc1bc5abae67e0a6fad6510","modified":1456473657012},{"_id":"source/_posts/2016-03-25-快速排序算法.md","shasum":"65d37cd29c5ad649e1560ee1f6ab353ce8a5b02d","modified":1458876980787},{"_id":"source/_posts/2016-02-24-Maven遇到的问题.md","shasum":"860620d246ce43fdbf43eff1a1f25688eeff19f2","modified":1456293295007},{"_id":"source/_posts/hello-world.md","shasum":"8fb609aeef4c193bac002070ca4b659174fdb70d","modified":1455861423236},{"_id":"source/_posts/一般矩阵乘积.md","shasum":"1e1b31a8e1797f01d927c1d1974fcbd93b45d82d","modified":1455877038708},{"_id":"source/about/index.md","shasum":"42278c160868e3755be8fac0b416e9f00867f8b0","modified":1452821613539},{"_id":"source/_posts/2016-02-26-ngrok的使用.md","shasum":"b18b969d783c004ede7a6f8c464901a70c3a9eb2","modified":1461295401771},{"_id":"source/categories/index.md","shasum":"54d2348bb5e9b9c93fc5c7691d8cd364132e606b","modified":1452821613500},{"_id":"source/tags/index.md","shasum":"6602258d7a23feca5093286ed60196008d22dc08","modified":1452821613477},{"_id":"source/_posts/2016-02-26-推荐一个表格生成工具.md","shasum":"f18c3918fe2bd3dd6fb3ccffa858db73ddddec36","modified":1456454747410},{"_id":"source/_posts/两个有序数组合并.md","shasum":"9fe4c925a3ffad2a574d406ead1e72d71e341fc3","modified":1455861057589},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1452821616102},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1452821616118},{"_id":"themes/next/source/css/_mixins/Mist.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1452821613836},{"_id":"themes/next/source/css/_mixins/Muse.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1452821613834},{"_id":"themes/next/source/css/_mixins/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1452821613851},{"_id":"themes/next/source/css/_variables/Muse.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1452821614805},{"_id":"themes/next/source/css/_variables/custom.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1452821614820},{"_id":"themes/next/bower.json","shasum":"d7f8d4eb7c6ac1bb8d642112601005f93e3da49b","modified":1452821617913},{"_id":"themes/next/_config.yml","shasum":"57ff309f26426f37d60a749ebcea9bf20cb413c6","modified":1456127557629},{"_id":"themes/next/languages/de.yml","shasum":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1452821617828},{"_id":"themes/next/README.en.md","shasum":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1452821617924},{"_id":"themes/next/languages/en.yml","shasum":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1452821617881},{"_id":"themes/next/languages/default.yml","shasum":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1452821617845},{"_id":"themes/next/languages/fr-FR.yml","shasum":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1452821617890},{"_id":"themes/next/languages/ru.yml","shasum":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1452821617863},{"_id":"themes/next/languages/pt.yml","shasum":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1452821617837},{"_id":"themes/next/languages/zh-hk.yml","shasum":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1452821617854},{"_id":"themes/next/languages/zh-tw.yml","shasum":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1452821617873},{"_id":"themes/next/layout/_layout.swig","shasum":"4c752913837a1c1f9e89c8e4030718b1578145f1","modified":1452821616388},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1452821616468},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1452821617798},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"794797c1957dd708256a5368e38c62d510f2bd86","modified":1452821616476},{"_id":"themes/next/layout/_macro/post.swig","shasum":"0674b9bf3103ca32e04f16c7f7a6adad7e32e011","modified":1452821616457},{"_id":"themes/next/layout/_partials/comments.swig","shasum":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1452821616324},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","shasum":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1452821616362},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"0723351816bd6e1ffa0e037e4ffc0beecbdd9cd7","modified":1452821616273},{"_id":"themes/next/README.md","shasum":"0b709591995001cd860384d6c189e51d91690714","modified":1452821617896},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1452821616355},{"_id":"themes/next/layout/_partials/header.swig","shasum":"bb96d82f5175727136c636fbf4ee99a84bc0556a","modified":1452835936197},{"_id":"themes/next/layout/_partials/search/tinysou.swig","shasum":"eefe2388ff3d424694045eda21346989b123977c","modified":1452821616404},{"_id":"themes/next/layout/_partials/search.swig","shasum":"64f14da26792a17bc27836c4e9d83190175f36e6","modified":1452821616296},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","shasum":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1452821616347},{"_id":"themes/next/layout/_partials/share/jiathis.swig","shasum":"63315fcf210799f894208c9f512737096df84962","modified":1452821616338},{"_id":"themes/next/layout/_partials/head.swig","shasum":"7edcc47b01b60e565b39b2baf3a87c20b61c7eaf","modified":1452821616372},{"_id":"themes/next/layout/_scripts/commons.swig","shasum":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1452821615966},{"_id":"themes/next/gulpfile.coffee","shasum":"b3d53f36460119c741a98c0dc494b1c65d3ec943","modified":1452821613654},{"_id":"themes/next/layout/_partials/search/swiftype.swig","shasum":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1452821616398},{"_id":"themes/next/layout/_scripts/boostrap.swig","shasum":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1452821616177},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"2b8f8c63abfcc805fad42b1c174cf61b6233d345","modified":1452821616161},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","shasum":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1452821616108},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","shasum":"33ca06b9bd9a15a19432d5396b85bd319f017319","modified":1452821616031},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","shasum":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1452821616097},{"_id":"themes/next/layout/_scripts/third-party/baidushare.swig","shasum":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1452821616079},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","shasum":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1452821616055},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","shasum":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1452821615989},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","shasum":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1452821616126},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","shasum":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1452821616007},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","shasum":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1452821616003},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","shasum":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1452821616091},{"_id":"themes/next/layout/_scripts/vendors.swig","shasum":"f12d7b0946d37853caa29009e6d134c2a378ad20","modified":1452821616176},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","shasum":"fa2b7a0006b6c447fa025474f8e0af4e4e569a36","modified":1452821616066},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","shasum":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1452821616049},{"_id":"themes/next/layout/category.swig","shasum":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1452821615936},{"_id":"themes/next/layout/archive.swig","shasum":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1452821616422},{"_id":"themes/next/layout/page.swig","shasum":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1452821616192},{"_id":"themes/next/layout/index.swig","shasum":"38b1ad401b748965369296b86327d23082a1fe93","modified":1452821616414},{"_id":"themes/next/scripts/filters/sticky.js","shasum":"6b1ea0c09105352813357d0fff4e1d3f4c821fa3","modified":1452821615922},{"_id":"themes/next/scripts/merge-configs.js","shasum":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1452821615867},{"_id":"themes/next/scripts/tags/center-quote.js","shasum":"535fc542781021c4326dec24d8495cbb1387634a","modified":1452821615883},{"_id":"themes/next/scripts/tags/full-image.js","shasum":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1452821615898},{"_id":"themes/next/scripts/tags/group-pictures.js","shasum":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1452821615882},{"_id":"themes/next/layout/tag.swig","shasum":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1452821616210},{"_id":"themes/next/package.json","shasum":"bd016b54983b7e06a649ee915b2e13a60d47553e","modified":1452821613579},{"_id":"themes/next/source/css/_common/_section/header.styl","shasum":"a6aa8a56f9f645ae5a76a1034f79adf73b053aa0","modified":1452821613897},{"_id":"themes/next/source/css/_common/components/buttons.styl","shasum":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1452821614459},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","shasum":"8d9b0f37cf0cd1c25e36303041406a8c72caf766","modified":1452821614013},{"_id":"themes/next/layout/post.swig","shasum":"a84457e8ced46e63bc7a8a9e0541a6ba53122a92","modified":1452821615956},{"_id":"themes/next/source/css/_common/components/comments.styl","shasum":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1452821614264},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","shasum":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1452821614470},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","shasum":"4a863a47b595a0cdc07348873589b50887322e21","modified":1452821613979},{"_id":"themes/next/source/css/_common/components/header/header.styl","shasum":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1452821614527},{"_id":"themes/next/source/css/_common/components/components.styl","shasum":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1452821614275},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","shasum":"61763d236029d2a4414be499d0e65d7dfb34605b","modified":1452821614493},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","shasum":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1452821614510},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","shasum":"6242be4307a3b3dafc14e556f51c8875c41a1ddd","modified":1452821614315},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","shasum":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1452821614155},{"_id":"themes/next/source/css/_common/components/header/menu.styl","shasum":"5d189b059c0a475917d771b349582dacdd575951","modified":1452821614523},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","shasum":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1452821614505},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","shasum":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1452821614151},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","shasum":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1452821614137},{"_id":"themes/next/source/css/_common/components/pagination.styl","shasum":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1452821614279},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","shasum":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1452821614245},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","shasum":"fe71e9be08cb418cf68352fd6212ddd0d7150579","modified":1452821614200},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","shasum":"e25f4b7856af95322e5ddb584af455c9a512dadd","modified":1452821614220},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","shasum":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1452821614204},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","shasum":"330a2ce52c5a5fefc1e85c473113a3bc58210c76","modified":1452821614227},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","shasum":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1452821614326},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","shasum":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1452821614168},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","shasum":"5c415dc8efab7c1bdeffacafa3100d1da6628b03","modified":1452821614261},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","shasum":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1452821614134},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","shasum":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1452821614242},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","shasum":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1452821614186},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","shasum":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1452821614183},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","shasum":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1452821614434},{"_id":"themes/next/source/css/_common/components/post/post.styl","shasum":"01db9373cd13c1aec840205c622064dd6ae03361","modified":1452821614171},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","shasum":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1452821614378},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","shasum":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1452821614337},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","shasum":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1452821614365},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","shasum":"6533563b34241e5c73da68156aba89e880b93f53","modified":1452821614444},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","shasum":"1099b5d07a60d93dad6221677c60cba60a82266b","modified":1452821614426},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","shasum":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1452821614406},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","shasum":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1452821614056},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","shasum":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1452821614415},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","shasum":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1452821614042},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","shasum":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1452821614071},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","shasum":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1452821614291},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","shasum":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1452821614092},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","shasum":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1452821614059},{"_id":"themes/next/source/css/_common/outline/outline.styl","shasum":"2186be20e317505cd31886f1291429cc21f76703","modified":1452821613901},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","shasum":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1452821614074},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","shasum":"f7fe897438ac99b363aba674c4054bf7d40d61b1","modified":1452821613973},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","shasum":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1452821613943},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","shasum":"c946b642bccc7a73c471bf6f119e40f54d0f1663","modified":1452821614086},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","shasum":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1452821613957},{"_id":"themes/next/source/css/_mixins/Pisces.styl","shasum":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1452821613830},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","shasum":"5f766cf26f966dbf9dcfe681f40ab9032e3e8a08","modified":1452821613937},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","shasum":"d50c2a9ae363d26ed2e9bc226a9dc7abeb9ace1b","modified":1452821614687},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","shasum":"1631a430655eadb485574d1a9bedd49460988b11","modified":1452821614733},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","shasum":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1452821613961},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","shasum":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1452821614691},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1452821613806},{"_id":"themes/next/source/css/_mixins/base.styl","shasum":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1452821613867},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","shasum":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1452821614627},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","shasum":"5a8036fc61207ca0fe38c9782ed2f686fbf764be","modified":1452821614735},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","shasum":"4bba29cece65ffc5122f4e052063dea4439fe4ae","modified":1452821614655},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","shasum":"36d707098100abd1ded76a2d016d8c95691b2420","modified":1452821614633},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","shasum":"eb4f5a0ae12b67d5e9b24056ec5715d03deda856","modified":1452821614558},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","shasum":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1452821614576},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","shasum":"fc7d96b897290dbd93bc8c515a2058fc4c374ea7","modified":1452821614670},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","shasum":"58a036397de73d868fee16f34d246a3d863f30c2","modified":1452821614580},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","shasum":"dcbfef1c76288620f7f405a7aeba893d458d5b6a","modified":1452821614592},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","shasum":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1452821614676},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","shasum":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1452821614543},{"_id":"themes/next/source/css/_variables/Mist.styl","shasum":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1452821614817},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","shasum":"6f4ba368b32939d0a1b5664f08243b50f9d1d3ff","modified":1452821614561},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","shasum":"159464cb8a7e01e32db9ec70dec391ec70a72f9c","modified":1452821614615},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","shasum":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1452821614540},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"72d1fe35024ea91ebfd0298d1fbc8df82abd4ce7","modified":1452821614836},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1452821615053},{"_id":"themes/next/source/css/_variables/Pisces.styl","shasum":"e6488372eacb4c8acbda42ed366e27a6de7693d4","modified":1452821614801},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1452821614898},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1452821614999},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1452821615041},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1452821614956},{"_id":"themes/next/source/css/_variables/default.styl","shasum":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1452821614849},{"_id":"themes/next/source/images/loading.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1452821615018},{"_id":"themes/next/source/css/main.styl","shasum":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1452821614751},{"_id":"themes/next/source/images/placeholder.gif","shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1452821614890},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1452821615061},{"_id":"themes/next/source/images/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1452821615008},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1452821614941},{"_id":"themes/next/source/js/src/bootstrap.js","shasum":"cca1fe42d49d3946f44b6ef1b247175f16ba796c","modified":1452821613795},{"_id":"themes/next/source/js/src/hook-duoshuo.js","shasum":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1452821613743},{"_id":"themes/next/source/js/src/affix.js","shasum":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1452821613737},{"_id":"themes/next/source/js/src/schemes/pisces.js","shasum":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1452821613780},{"_id":"themes/next/source/images/quote-l.svg","shasum":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1452821614987},{"_id":"themes/next/source/js/src/scrollspy.js","shasum":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1452821613774},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1452821615824},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1452821615682},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1452821615663},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1452821615795},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1452821615789},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1452821615815},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1452821615732},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1452821615769},{"_id":"themes/next/source/images/quote-r.svg","shasum":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1452821615028},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1452821615751},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1452821615733},{"_id":"themes/next/source/js/src/motion.js","shasum":"9815469d0142811f98384b4f7046edaae7a7f3ff","modified":1452821613757},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1452821615806},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1452821615714},{"_id":"themes/next/source/js/src/utils.js","shasum":"7eb00abf9bc14516463d9f29db41805e808a565c","modified":1452821613789},{"_id":"themes/next/source/vendors/fastclick/LICENSE","shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1452821615396},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1452821615776},{"_id":"themes/next/source/vendors/fastclick/bower.json","shasum":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1452821615430},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1452821615757},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","shasum":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1452821615450},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","shasum":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1452821615312},{"_id":"themes/next/source/vendors/font-awesome/bower.json","shasum":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1452821615294},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","shasum":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1452821615149},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","shasum":"0189d278706509412bac4745f96c83984e1d59f4","modified":1452821615123},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1452821615154},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1452821615709},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1452821615185},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","shasum":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1452821615340},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","shasum":"895d50fa29759af7835256522e9dd7dac597765c","modified":1452821615349},{"_id":"themes/next/source/vendors/fastclick/README.md","shasum":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1452821615410},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","shasum":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1452821615318},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","shasum":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1452821615362},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","shasum":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1452821615591},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","shasum":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1452821615597},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1452821615514},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1452821615437},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1452821615535},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1452821615470},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","shasum":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1452821615331},{"_id":"themes/next/test/helpers.js","shasum":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1452821613615},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","shasum":"0112e96f327d413938d37c1693806f468ffdbace","modified":1452821615217},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1452821615231},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1452821615272},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1452821615480},{"_id":"themes/next/test/intern.js","shasum":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1452821613633},{"_id":"themes/next/source/images/my_avatar.jpg","shasum":"4c03972f2ebd9298c687f0dfc212fc02565090a8","modified":1452821614981},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1452821615190},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1452821615838},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1452821615507},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","shasum":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1452821615284},{"_id":"public/CNAME","modified":1478670566218,"shasum":"a56016cabb090cb83b65a704dad37fe8d66eac72"},{"_id":"public/vendors/velocity/velocity.ui.min.js","modified":1478670566231,"shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908"},{"_id":"public/vendors/velocity/velocity.ui.js","modified":1478670566235,"shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df"},{"_id":"public/vendors/velocity/velocity.min.js","modified":1478670566247,"shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6"},{"_id":"public/vendors/velocity/velocity.js","modified":1478670566254,"shasum":"9f08181baea0cc0e906703b7e5df9111b9ef3373"},{"_id":"public/vendors/velocity/bower.json","modified":1478670566258,"shasum":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409"},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1478670566274,"shasum":"214dad442a92d36af77ed0ca1d9092b16687f02f"},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","modified":1478670566279,"shasum":"38628e75e4412cc6f11074e03e1c6d257aae495b"},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","modified":1478670566294,"shasum":"0e9a81785a011c98be5ea821a8ed7d411818cfd1"},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","modified":1478670566297,"shasum":"481fd478650e12b67c201a0ea41e92743f8b45a3"},{"_id":"public/vendors/jquery_lazyload/bower.json","modified":1478670566302,"shasum":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53"},{"_id":"public/vendors/jquery_lazyload/README.html","modified":1478670566350,"shasum":"c593e16f0d63d24b5d3933f3b9297884867ce4a0"},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","modified":1478670566367,"shasum":"bf8e477ee2d81833cff12572a8a5f61abffc187c"},{"_id":"public/vendors/jquery/index.js","modified":1478670566371,"shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1478670566376,"shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1478670566383,"shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1478670566392,"shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1478670566400,"shasum":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824"},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1478670566409,"shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6"},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","modified":1478670566417,"shasum":"0112e96f327d413938d37c1693806f468ffdbace"},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","modified":1478670566427,"shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22"},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","modified":1478670566431,"shasum":"0189d278706509412bac4745f96c83984e1d59f4"},{"_id":"public/vendors/font-awesome/css/font-awesome.css","modified":1478670566434,"shasum":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7"},{"_id":"public/vendors/font-awesome/bower.json","modified":1478670566441,"shasum":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad"},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","modified":1478670566444,"shasum":"69a4c537d167b68a0ccf1c6febd138aeffca60d6"},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","modified":1478670566447,"shasum":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18"},{"_id":"public/vendors/fastclick/lib/fastclick.js","modified":1478670566453,"shasum":"06cef196733a710e77ad7e386ced6963f092dc55"},{"_id":"public/vendors/fastclick/bower.json","modified":1478670566458,"shasum":"4dcecf83afddba148464d5339c93f6d0aa9f42e9"},{"_id":"public/vendors/fastclick/README.html","modified":1478670566473,"shasum":"627cdd7a56fc7d9c169b9f6afedd74f77e6d3d06"},{"_id":"public/vendors/fastclick/LICENSE","modified":1478670566485,"shasum":"dcd5b6b43095d9e90353a28b09cb269de8d4838e"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","modified":1478670566490,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","modified":1478670566495,"shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","modified":1478670566509,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1478670566513,"shasum":"53e194f4a72e649c04fb586dd57762b8c022800b"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1478670566515,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1478670566518,"shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1478670566523,"shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1478670566530,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1478670566532,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","modified":1478670566535,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","modified":1478670566537,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","modified":1478670566541,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","modified":1478670566544,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","modified":1478670566546,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/vendors/fancybox/source/blank.gif","modified":1478670566549,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/js/src/utils.js","modified":1478670566550,"shasum":"7eb00abf9bc14516463d9f29db41805e808a565c"},{"_id":"public/js/src/scrollspy.js","modified":1478670566552,"shasum":"fe4da1b9fe73518226446f5f27d2831e4426fc35"},{"_id":"public/js/src/schemes/pisces.js","modified":1478670566554,"shasum":"94f935331995bfeadf1084fb8f0665ab39fd1c8d"},{"_id":"public/js/src/motion.js","modified":1478670566556,"shasum":"9815469d0142811f98384b4f7046edaae7a7f3ff"},{"_id":"public/js/src/hook-duoshuo.js","modified":1478670566559,"shasum":"a6119070c0119f33e08b29da7d2cce2635eb40a0"},{"_id":"public/js/src/bootstrap.js","modified":1478670566561,"shasum":"cca1fe42d49d3946f44b6ef1b247175f16ba796c"},{"_id":"public/js/src/affix.js","modified":1478670566567,"shasum":"978e0422b5bf1b560236d8d10ebc1adcf66392e3"},{"_id":"public/images/searchicon.png","modified":1478670566571,"shasum":"67727a6a969be0b2659b908518fa6706eed307b8"},{"_id":"public/images/quote-r.svg","modified":1478670566574,"shasum":"e60ae504f9d99b712c793c3740c6b100d057d4ec"},{"_id":"public/images/quote-l.svg","modified":1478670566580,"shasum":"94e870b4c8c48da61d09522196d4dd40e277a98f"},{"_id":"public/images/placeholder.gif","modified":1478670566583,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/my_avatar.jpg","modified":1478670566586,"shasum":"4c03972f2ebd9298c687f0dfc212fc02565090a8"},{"_id":"public/images/loading.gif","modified":1478670566590,"shasum":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b"},{"_id":"public/images/cc-zero.svg","modified":1478670566593,"shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"public/images/cc-by.svg","modified":1478670566596,"shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"public/images/cc-by-sa.svg","modified":1478670566599,"shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"public/images/cc-by-nd.svg","modified":1478670566601,"shasum":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"public/images/cc-by-nc.svg","modified":1478670566605,"shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"public/images/cc-by-nc-sa.svg","modified":1478670566609,"shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"public/images/cc-by-nc-nd.svg","modified":1478670566613,"shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"public/css/main.css","modified":1478670567259,"shasum":"3ff98ceeb5dcb59881df3e21f0cd45de344d25df"},{"_id":"public/tags/index.html","modified":1478670567535,"shasum":"1df11c3662f2aa6a96d2a5b6381e496624c5198e"},{"_id":"public/categories/index.html","modified":1478670567617,"shasum":"d63ee3c6afbc55cd8bb836ee42fdd451182e28a7"},{"_id":"public/about/index.html","modified":1478670567675,"shasum":"1b116ce465e1415f75139c48f6cc46c93fd684fb"},{"_id":"public/2016/03/25/快速排序算法/index.html","modified":1478670567783,"shasum":"2a526034f5218b5e65da2975147dea517518d1ad"},{"_id":"public/2016/02/26/ngrok的使用/index.html","modified":1478670567863,"shasum":"5bf921f0ea0b02408fee419c5bc67c60373f014d"},{"_id":"public/2016/02/26/推荐一个表格生成工具/index.html","modified":1478670567951,"shasum":"06ad1d21ad4f2ebd557680d04e7bb22288d8d441"},{"_id":"public/2016/02/26/Maven/index.html","modified":1478670568130,"shasum":"3e34a4bd174a013f86b89a620791e89b9035d6f3"},{"_id":"public/2016/02/24/Maven遇到的问题/index.html","modified":1478670568234,"shasum":"fd355a38f56d7ee8f7f5304fce6b2c971d86f4ad"},{"_id":"public/2016/02/23/装饰模式/index.html","modified":1478670568356,"shasum":"784a11b53a6210efbe70954535e776f395e4192c"},{"_id":"public/2016/02/23/代理模式/index.html","modified":1478670568456,"shasum":"bf7422545ff37d4aec5a2e708105f16ee0dac89f"},{"_id":"public/2016/02/19/一般矩阵乘积/index.html","modified":1478670568533,"shasum":"3997bacd03a998b02292ddb8e9372a17bd4a670b"},{"_id":"public/2016/02/19/两个有序数组合并/index.html","modified":1478670568618,"shasum":"45a2188e8370fd08280a1c4bbefb89790a9113b3"},{"_id":"public/2016/01/01/hello-world/index.html","modified":1478670568698,"shasum":"16066a63f4dce6cc0deba06f9b2264ded82a038b"},{"_id":"public/archives/index.html","modified":1478670568794,"shasum":"f70885322201e20b219ea12d6128c51060768009"},{"_id":"public/archives/2016/index.html","modified":1478670568877,"shasum":"6d33bc104285f69d011a635fcd639eff27e1740d"},{"_id":"public/archives/2016/01/index.html","modified":1478670568942,"shasum":"45810198e6a1d179f2a0422699c554869692436d"},{"_id":"public/archives/2016/02/index.html","modified":1478670569018,"shasum":"309ebd2c674b394e4c2e0a191b938b878dff16ff"},{"_id":"public/archives/2016/03/index.html","modified":1478670569088,"shasum":"f2495465a43fbd847cb35a44440bcf13a737debe"},{"_id":"public/categories/算法/index.html","modified":1478670569140,"shasum":"0a26c0223a84c8b24059acc383f83805732ef148"},{"_id":"public/categories/开发问题/index.html","modified":1478670569199,"shasum":"12043abc37a14cf3f233b5545de196a545674a62"},{"_id":"public/categories/设计模式/index.html","modified":1478670569262,"shasum":"c4ec70234fd09b5e52def16523a12441b50ca279"},{"_id":"public/index.html","modified":1478670569362,"shasum":"12959468d99c731d24523437a7e217fce0da615b"},{"_id":"public/tags/编程题/index.html","modified":1478670569417,"shasum":"e6b5323cddda640db2d9fcc0a01cd60b68a3579d"},{"_id":"public/tags/算法/index.html","modified":1478670569480,"shasum":"0e89f46b59606e2ec7bb7a1e147518cfcbf041e3"},{"_id":"public/tags/小工具/index.html","modified":1478670569539,"shasum":"e38f9c4fb5738e75de8e0c2cd4e1d7120c9b5f1d"},{"_id":"public/tags/Maven/index.html","modified":1478670569589,"shasum":"f77dd5451e0c5efe3f8491453ed21e56e22828b8"},{"_id":"public/tags/Java/index.html","modified":1478670569659,"shasum":"a61dd6f44a1fe322f633e4fa36a2475e81ac6f95"},{"_id":"public/tags/设计模式/index.html","modified":1478670569713,"shasum":"f6de355c9ae31c187a59d135dc139a2d61bd385a"},{"_id":"themes/landscape/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1452821617958},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1452821618884},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1452821617984},{"_id":"themes/landscape/_config.yml","shasum":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1452821617951},{"_id":"themes/landscape/languages/default.yml","shasum":"fd7397be7789b43c1c163ab4faf106318811c2a8","modified":1452821618861},{"_id":"themes/landscape/languages/zh-CN.yml","shasum":"751c74830d5609969f1fd6e7fa933ecd5756117a","modified":1452821618840},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1452821618769},{"_id":"themes/landscape/languages/zh-TW.yml","shasum":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1452821618866},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"30806481bc1233996e6f0c8ec59d23c3a55df034","modified":1452821618652},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"e75889a31dbc27e2425c5a9a3eb2baa764cc6f85","modified":1478688812533},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"c02b8673ef726ca520e0d24361bedca846410295","modified":1452821618686},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"d3f702b403e9b0ed66413fc979f1f5bd4890716b","modified":1478689530221},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1452821618790},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"01201725258ad2aaee606cd4dfdebc21b646def1","modified":1452821618757},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1452821618692},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"4b19c1080c9e6c2acd922a88ed29d183a3b5bc09","modified":1452821618802},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1452821618750},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1452821618726},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1452821618701},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"f26d30355ba9144c51e700e8edc6a4ab6144ff9a","modified":1452821618709},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1452821618718},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1452821618742},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1452821618779},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"71754895e33fd57a3d47c4e3bf52cb6aa25623f7","modified":1452821618581},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","shasum":"34dc8cdd96cdb41dd11cb7513f13714373e5104a","modified":1452821618599},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"500217790ff080a6a20f96193a245a8c1e770e72","modified":1452821618585},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","shasum":"feba7c00fa59ba13bf870b358a499fde4473d335","modified":1452821618616},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"e9e367de7086b874e694389985236793f80251e0","modified":1452821618602},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1452821618543},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1452821618641},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1452821618833},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1452821618811},{"_id":"themes/landscape/package.json","shasum":"85358dc34311c6662e841584e206a4679183943f","modified":1452821617941},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1452821618517},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1452821618567},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1452821618293},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1452821618552},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1452821618022},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1452821618314},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1452821618266},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1452821618333},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1452821618817},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1452821618281},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1452821618275},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1452821618327},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1452821618310},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1452821618057},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1452821618257},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1452821618248},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1452821618065},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1452821618091},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1452821618298},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1452821618111},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1452821618154},{"_id":"themes/landscape/source/css/style.styl","shasum":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1452821618197},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1452821618508},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1452821618475},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1452821618479},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1452821618381},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1452821618497},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1452821618365},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1452821618400},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1452821618440},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1452821618420},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1452821618435},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1452821618414},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1452821618491},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1452821618397},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1452821618087},{"_id":"themes/landscape/source/js/script.js","shasum":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1452821618015},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1452821618458},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1452821618461},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1452821618181},{"_id":"themes/landscape/source/css/images/banner_bak.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1452821618228},{"_id":"themes/landscape/source/css/images/1.jpg","shasum":"c9f993ab857cc55c3ca29b4a0e7039d9e19ae343","modified":1399561541499},{"_id":"themes/landscape/source/js/jquery.min.js","shasum":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1478688453866},{"_id":"themes/landscape/source/css/images/banner3.jpg","shasum":"4ce2d9a5b440191ba0063288246c8a2954e50650","modified":1442809784949},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"6c2cbfbb57d000a9927780f08b44faae4e671988","modified":1478689919586}],"Category":[{"name":"算法","_id":"civai9ybj000ai4v57mdmg7n7"},{"name":"开发问题","_id":"civai9ybx000ni4v5s1dlds6l"},{"name":"设计模式","_id":"civai9yc1000ti4v5ocuo302j"}],"Data":[],"Page":[{"title":"标签","date":"2016-01-14T15:32:05.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-01-14 23:32:05\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-01-15T01:33:33.477Z","path":"tags/index.html","layout":"page","_id":"civai9y8n0000i4v55c91sclk"},{"title":"分类","date":"2016-01-14T15:34:13.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-01-14 23:34:13\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-01-15T01:33:33.500Z","path":"categories/index.html","layout":"page","_id":"civai9ya50001i4v5330fmn7n"},{"title":"about","date":"2016-01-14T15:43:26.000Z","comments":0,"_content":"\n```java\npublic Class AboutMe {\n\tpublic static main void(String[] args) {\n\t\tSystem.out.println(\"猿一枚\");\n\t}\n}\n```","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-01-14 23:43:26\ncomments: false\n---\n\n```java\npublic Class AboutMe {\n\tpublic static main void(String[] args) {\n\t\tSystem.out.println(\"猿一枚\");\n\t}\n}\n```","updated":"2016-01-15T01:33:33.539Z","path":"about/index.html","layout":"page","_id":"civai9yay0002i4v5kdy9mhoo"}],"Post":[{"title":"两个有序数组合并","date":"2016-02-19T05:35:02.000Z","_content":"\n### Description ###\n已知数组a中有m个按升序排列的元素，数组b中有n个按降序排列的元素，编程将a与b中的所有元素按降序存入数组c中。\n\n### Input ###\n输入有两行，第一行首先是一个正整数m，然后是m个整数；第二行首先是一个正整数n，然后是n个整数，m, n均小于等于1000000。\n\n### Output ###\n输出合并后的m+n个整数，数据之间用空格隔开。输出占一行。\n\n### Sample Input ###\n\t4 1 3 5 7\n\t3 6 4 2\n\n\n### Sample Output ###\n\t7 6 5 4 3 2 1\n\n### Source ###\n**不去重写法**\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static Scanner input = new Scanner(System.in);\n\n\tpublic static void main(String[] args) {\n\t\tint m = input.nextInt();\n\t\tint[] aArr = readArr(m);\n\t\tint n = input.nextInt();\n\t\tint[] bArr = readArr(n);\n\n\t\tprintArr(mergeArr(aArr, bArr));\n\t}\n\n\t// 合并数组\n\tpublic static int[] mergeArr(int[] a, int[] b) {\n\t\tint[] c = new int[a.length + b.length];\n\t\tint i = a.length - 1, j = 0, k = 0;\n\t\twhile (i >= 0 && j < b.length) {\n\t\t\tif (a[i] < b[j]) {\n\t\t\t\tc[k++] = b[j++];\n\t\t\t} else {\n\t\t\t\tc[k++] = a[i--];\n\t\t\t}\n\t\t}\n\t\t// 将maxLength(a,b)剩余的部分直接放入c中\n\t\twhile (i >= 0) {\n\t\t\tc[k++] = a[i--];\n\t\t}\n\t\twhile (j < b.length) {\n\t\t\tc[k++] = b[j++];\n\t\t}\n\t\treturn c;\n\t}\n\n\tpublic static int[] readArr(int x) {\n\t\tint[] intArr = new int[x];\n\t\tfor (int i = 0; i < intArr.length; i++) {\n\t\t\tintArr[i] = input.nextInt();\n\t\t}\n\t\treturn intArr;\n\t}\n\n\tpublic static void printArr(int[] cArr) {\n\t\tfor (int i = 0; i < cArr.length; i++) {\n\t\t\tSystem.out.print(cArr[i]);\n\t\t\tif (i < cArr.length - 1) {\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t}\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n}\n```\n\n**去重写法**\n```java\npublic static int[] mergeArr(int[] a, int[] b) {\n\tint[] c = new int[a.length + b.length];\n\tint i = a.length - 1, j = 0, k = 0;\n\twhile (i >= 0 && j < b.length) {\n\t\tif (a[i] < b[j]) {\n\t\t\tif (k == 0 || b[j] != c[k - 1]) {\n\t\t\t\tc[k++] = b[j];\n\t\t\t}\n\t\t\tj++;\n\t\t} else {\n\t\t\tif (k == 0 || a[i] != c[k - 1]) {\n\t\t\t\tc[k++] = a[i];\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\t}\n\t// 将maxLength(a,b)剩余的部分直接放入c中\n\twhile (i >= 0) {\n\t\tif (k == 0 || a[i] != c[k - 1]) {\n\t\t\tc[k++] = a[i];\n\t\t}\n\t\ti--;\n\t}\n\twhile (j < b.length) {\n\t\tif (k == 0 || b[j] != c[k - 1]) {\n\t\t\tc[k++] = b[j];\n\t\t}\n\t\tj++;\n\t}\n\t// 截取数组\n\tint[] d = new int[k];\n\tfor (int l = 0; l < k; l++) {\n\t\td[l] = c[l];\n\t}\n\treturn d;\n}\n```\n\n### HINT ###\n不要使用排序，数组已经有序，排序会大大影响程序效率。","source":"_posts/两个有序数组合并.md","raw":"---\ntitle: 两个有序数组合并\ndate: 2016-02-19 13:35:02\ntags:\n\t- 编程题\n---\n\n### Description ###\n已知数组a中有m个按升序排列的元素，数组b中有n个按降序排列的元素，编程将a与b中的所有元素按降序存入数组c中。\n\n### Input ###\n输入有两行，第一行首先是一个正整数m，然后是m个整数；第二行首先是一个正整数n，然后是n个整数，m, n均小于等于1000000。\n\n### Output ###\n输出合并后的m+n个整数，数据之间用空格隔开。输出占一行。\n\n### Sample Input ###\n\t4 1 3 5 7\n\t3 6 4 2\n\n\n### Sample Output ###\n\t7 6 5 4 3 2 1\n\n### Source ###\n**不去重写法**\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static Scanner input = new Scanner(System.in);\n\n\tpublic static void main(String[] args) {\n\t\tint m = input.nextInt();\n\t\tint[] aArr = readArr(m);\n\t\tint n = input.nextInt();\n\t\tint[] bArr = readArr(n);\n\n\t\tprintArr(mergeArr(aArr, bArr));\n\t}\n\n\t// 合并数组\n\tpublic static int[] mergeArr(int[] a, int[] b) {\n\t\tint[] c = new int[a.length + b.length];\n\t\tint i = a.length - 1, j = 0, k = 0;\n\t\twhile (i >= 0 && j < b.length) {\n\t\t\tif (a[i] < b[j]) {\n\t\t\t\tc[k++] = b[j++];\n\t\t\t} else {\n\t\t\t\tc[k++] = a[i--];\n\t\t\t}\n\t\t}\n\t\t// 将maxLength(a,b)剩余的部分直接放入c中\n\t\twhile (i >= 0) {\n\t\t\tc[k++] = a[i--];\n\t\t}\n\t\twhile (j < b.length) {\n\t\t\tc[k++] = b[j++];\n\t\t}\n\t\treturn c;\n\t}\n\n\tpublic static int[] readArr(int x) {\n\t\tint[] intArr = new int[x];\n\t\tfor (int i = 0; i < intArr.length; i++) {\n\t\t\tintArr[i] = input.nextInt();\n\t\t}\n\t\treturn intArr;\n\t}\n\n\tpublic static void printArr(int[] cArr) {\n\t\tfor (int i = 0; i < cArr.length; i++) {\n\t\t\tSystem.out.print(cArr[i]);\n\t\t\tif (i < cArr.length - 1) {\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t}\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n}\n```\n\n**去重写法**\n```java\npublic static int[] mergeArr(int[] a, int[] b) {\n\tint[] c = new int[a.length + b.length];\n\tint i = a.length - 1, j = 0, k = 0;\n\twhile (i >= 0 && j < b.length) {\n\t\tif (a[i] < b[j]) {\n\t\t\tif (k == 0 || b[j] != c[k - 1]) {\n\t\t\t\tc[k++] = b[j];\n\t\t\t}\n\t\t\tj++;\n\t\t} else {\n\t\t\tif (k == 0 || a[i] != c[k - 1]) {\n\t\t\t\tc[k++] = a[i];\n\t\t\t}\n\t\t\ti--;\n\t\t}\n\t}\n\t// 将maxLength(a,b)剩余的部分直接放入c中\n\twhile (i >= 0) {\n\t\tif (k == 0 || a[i] != c[k - 1]) {\n\t\t\tc[k++] = a[i];\n\t\t}\n\t\ti--;\n\t}\n\twhile (j < b.length) {\n\t\tif (k == 0 || b[j] != c[k - 1]) {\n\t\t\tc[k++] = b[j];\n\t\t}\n\t\tj++;\n\t}\n\t// 截取数组\n\tint[] d = new int[k];\n\tfor (int l = 0; l < k; l++) {\n\t\td[l] = c[l];\n\t}\n\treturn d;\n}\n```\n\n### HINT ###\n不要使用排序，数组已经有序，排序会大大影响程序效率。","slug":"两个有序数组合并","published":1,"updated":"2016-02-19T05:50:57.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civai9yb20003i4v5xbttu0ai","sticky":0},{"title":"一般矩阵乘积","date":"2016-02-19T10:14:53.000Z","_content":"\n### Description ###\n计算两个矩阵A和B的乘积。\n\n### Input ###\n第一行三个正整数m、p和n，0<=m,n,p<=10，表示矩阵A是m行p列，矩阵B是p行n列；\n\n接下来的m行是矩阵A的内容，每行p个整数，用空格隔开；\n\n最后的p行是矩阵B的内容，每行n个整数，用空格隔开。\n\n### Output ###\n输出乘积矩阵：输出占m行，每行n个数据，以空格隔开。\n\n### Sample Input ###\n\t2 3 4\n\n\t1 0 1\n\t0 0 1\n\n\t1 1 1 3\n\t4 5 6 7\n\t8 9 1 0\n\n\n### Sample Output ###\n\t9 10 2 3\n\t8 9 1 0\n\n### Source ###\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static Scanner input = new Scanner(System.in);\n\n\tpublic static void main(String[] args) {\n\t\tint m = input.nextInt();\n\t\tint p = input.nextInt();\n\t\tint n = input.nextInt();\n\t\tint[][] a = readArr(m, p);\n\t\tint[][] b = readArr(p, n);\n\t\tint[][] c = new int[m][n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tfor (int k = 0; k < p; k++) {\n\t\t\t\t\tc[i][j] += a[i][k] * b[k][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprint(c, m, n);\n\t}\n\n\tpublic static int[][] readArr(int x, int y) {\n\t\tint[][] a = new int[x][y];\n\t\tfor (int i = 0; i < x; i++) {\n\t\t\tfor (int j = 0; j < y; j++) {\n\t\t\t\ta[i][j] = input.nextInt();\n\t\t\t}\n\t\t}\n\t\treturn a;\n\t}\n\n\tpublic static void print(int[][] a, int m, int n) {\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tSystem.out.print(a[i][j]);\n\t\t\t\tif (j < n - 1) {\n\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n}\n```","source":"_posts/一般矩阵乘积.md","raw":"---\ntitle: 一般矩阵乘积\ndate: 2016-02-19 18:14:53\ntags:\n\t- 编程题\n---\n\n### Description ###\n计算两个矩阵A和B的乘积。\n\n### Input ###\n第一行三个正整数m、p和n，0<=m,n,p<=10，表示矩阵A是m行p列，矩阵B是p行n列；\n\n接下来的m行是矩阵A的内容，每行p个整数，用空格隔开；\n\n最后的p行是矩阵B的内容，每行n个整数，用空格隔开。\n\n### Output ###\n输出乘积矩阵：输出占m行，每行n个数据，以空格隔开。\n\n### Sample Input ###\n\t2 3 4\n\n\t1 0 1\n\t0 0 1\n\n\t1 1 1 3\n\t4 5 6 7\n\t8 9 1 0\n\n\n### Sample Output ###\n\t9 10 2 3\n\t8 9 1 0\n\n### Source ###\n```java\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static Scanner input = new Scanner(System.in);\n\n\tpublic static void main(String[] args) {\n\t\tint m = input.nextInt();\n\t\tint p = input.nextInt();\n\t\tint n = input.nextInt();\n\t\tint[][] a = readArr(m, p);\n\t\tint[][] b = readArr(p, n);\n\t\tint[][] c = new int[m][n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tfor (int k = 0; k < p; k++) {\n\t\t\t\t\tc[i][j] += a[i][k] * b[k][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tprint(c, m, n);\n\t}\n\n\tpublic static int[][] readArr(int x, int y) {\n\t\tint[][] a = new int[x][y];\n\t\tfor (int i = 0; i < x; i++) {\n\t\t\tfor (int j = 0; j < y; j++) {\n\t\t\t\ta[i][j] = input.nextInt();\n\t\t\t}\n\t\t}\n\t\treturn a;\n\t}\n\n\tpublic static void print(int[][] a, int m, int n) {\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tSystem.out.print(a[i][j]);\n\t\t\t\tif (j < n - 1) {\n\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n}\n```","slug":"一般矩阵乘积","published":1,"updated":"2016-02-19T10:17:18.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civai9ybc0006i4v5r9o8e27o","sticky":0},{"title":"Hello World","date":"2015-12-31T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-01-01 00:00:00\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-02-19T05:57:03.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civai9ybf0008i4v50flx4cx9","sticky":0},{"title":"快速排序算法","comments":1,"date":"2016-03-25T03:29:30.000Z","_content":"\n### 核心思想\n- 挖坑填数\n- ”分治“思想\n\n### 递归实现(JAVA、)\n```java\nvoid quick_sort(int[] s, int l, int r) {\n\tif (l < r) {\n\t\tint i = l, j = r, x = s[l];\n\t\t// 挖坑填数\n\t\twhile (i < j) {\n\t\t\t// 从右向左查找第一个小于x的数\n\t\t\twhile (i < j && s[j] >= x) {\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (i < j) {\n\t\t\t\ts[i++] = s[j];\n\t\t\t}\n\t\t\t\n\t\t\t// 从左向右查找第一个大于x的数\n\t\t\twhile (i < j && s[i] <= x) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (i < j) {\n\t\t\t\ts[j--] = s[i];\n\t\t\t}\n\t\t}\n\t\ts[i] = x;\n\t\t// 递归调用\n\t\tquick_sort(s, l, i - 1);\n\t\tquick_sort(s, i + 1, r);\n\t}\n}\n```","source":"_posts/2016-03-25-快速排序算法.md","raw":"---\ntitle: 快速排序算法\ncomments: true\ndate: 2016-03-25 11:29:30\ncategories:\n\t- 算法\ntags:\n\t- 算法\n---\n\n### 核心思想\n- 挖坑填数\n- ”分治“思想\n\n### 递归实现(JAVA、)\n```java\nvoid quick_sort(int[] s, int l, int r) {\n\tif (l < r) {\n\t\tint i = l, j = r, x = s[l];\n\t\t// 挖坑填数\n\t\twhile (i < j) {\n\t\t\t// 从右向左查找第一个小于x的数\n\t\t\twhile (i < j && s[j] >= x) {\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (i < j) {\n\t\t\t\ts[i++] = s[j];\n\t\t\t}\n\t\t\t\n\t\t\t// 从左向右查找第一个大于x的数\n\t\t\twhile (i < j && s[i] <= x) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (i < j) {\n\t\t\t\ts[j--] = s[i];\n\t\t\t}\n\t\t}\n\t\ts[i] = x;\n\t\t// 递归调用\n\t\tquick_sort(s, l, i - 1);\n\t\tquick_sort(s, i + 1, r);\n\t}\n}\n```","slug":"快速排序算法","published":1,"updated":"2016-03-25T03:36:20.787Z","layout":"post","photos":[],"link":"","_id":"civai9ybi0009i4v5iwnbvuwc","sticky":0},{"title":"推荐一个表格生成工具","comments":1,"date":"2016-02-26T02:32:18.000Z","_content":"\n**可以很方便地生成**\n\n- HTML Table\nMarkDown Table\nLaTeX Table\nText Table\nMediaWiki Table\n\n**http://www.tablesgenerator.com/**","source":"_posts/2016-02-26-推荐一个表格生成工具.md","raw":"---\ntitle: 推荐一个表格生成工具\ncomments: true\ndate: 2016-02-26 10:32:18\ncategories:\ntags:\n\t- 小工具\n---\n\n**可以很方便地生成**\n\n- HTML Table\nMarkDown Table\nLaTeX Table\nText Table\nMediaWiki Table\n\n**http://www.tablesgenerator.com/**","slug":"推荐一个表格生成工具","published":1,"updated":"2016-02-26T02:45:47.410Z","layout":"post","photos":[],"link":"","_id":"civai9ybn000ei4v5rfa5qroi","sticky":0},{"title":"ngrok的使用","comments":1,"date":"2016-02-26T03:36:21.000Z","_content":"\n### 映射本机端口到80 ###\n\tngrok -config=ngrok.cfg -subdomain hscc 8080\n\n### 映射其他机器 ###\n\tngrok -config=ngrok.cfg -subdomain hscc 192.168.*.*:8080\n\n### TCP 端口转发 ###\n\tngrok -config=ngrok.cfg -proto=tcp 3389\n\n### TCP 端口转发其他机器 ###\n\tngrok -config=ngrok.cfg -proto=tcp 192.168.*.*:3389\n","source":"_posts/2016-02-26-ngrok的使用.md","raw":"---\ntitle: ngrok的使用\ncomments: true\ndate: 2016-02-26 11:36:21\ncategories:\ntags:\n\t- 小工具\n---\n\n### 映射本机端口到80 ###\n\tngrok -config=ngrok.cfg -subdomain hscc 8080\n\n### 映射其他机器 ###\n\tngrok -config=ngrok.cfg -subdomain hscc 192.168.*.*:8080\n\n### TCP 端口转发 ###\n\tngrok -config=ngrok.cfg -proto=tcp 3389\n\n### TCP 端口转发其他机器 ###\n\tngrok -config=ngrok.cfg -proto=tcp 192.168.*.*:3389\n","slug":"ngrok的使用","published":1,"updated":"2016-04-22T03:23:21.771Z","layout":"post","photos":[],"link":"","_id":"civai9ybq000hi4v5v5npnsbh","sticky":0},{"title":"Maven的使用","comments":1,"date":"2016-02-26T01:19:43.000Z","_content":"\n### 概述 ###\n\n#### Maven 是什么？ ####\nMaven 是一个项目管理和整合工具。Maven 为开发者提供了一套完整的构建生命周期框架。开发团队几乎不用花多少时间就能够自动完成工程的基础构建配置，因为 Maven 使用了一个标准的目录结构和一个默认的构建生命周期。\n\n在有多个开发团队环境的情况下，Maven 能够在很短的时间内使得每项工作都按照标准进行。因为大部分的工程配置操作都非常简单并且可复用，在创建报告、检查、构建和测试自动配置时，Maven 可以让开发者的工作变得更简单。\n\nMaven 能够帮助开发者完成以下工作：\n- 构建\n- 文档生成\n- 报告\n- 依赖\n- SCMs\n- 发布\n- 分发\n- 邮件列表\n\n总的来说，Maven 简化了工程的构建过程，并对其标准化。它无缝衔接了编译、发布、文档生成、团队合作和其他任务。Maven 提高了重用性，负责了大部分构建相关的任务。\n\n#### Maven 的历史 ####\nMaven 最初是在 Jakarta Turbine 项目中为了简化构建过程而设计的。项目中有几个子工程，每个工程包含稍有不同的 ANT 文件。JAR 文件使用 CVS 管理。\n\nApache 小组随后开发了 Maven，能够同时构建多个工程、发布工程信息、部署工程、在几个工程中共享 JAR 文件，并且协助团队合作\n\n#### Maven 的目标 ####\nMaven 的主要目的是为开发者提供\n- 一个可复用、可维护、更易理解的工程综合模型\n- 与这个模型交互的插件或者工具\n\nMaven 工程结构和内容被定义在一个 xml 文件中 － pom.xml，是 Project Object Model (POM) 的简称，此文件是整个 Maven 系统的基础组件。\n\n#### 约定优于配置 ####\nMaven 使用约定而不是配置，意味着开发者不需要再自己创建构建过程。\n\n开发者不需要再关心每一个配置细节。Maven 为工程提供了合理的默认行为。当创建 Maven 工程时，Maven 会创建默认的工程结构。开发者只需要合理的放置文件，而在 pom.xml 中不再需要定义任何配置。\n\n举例说明，下面的表格展示了工程源码文件、资源文件的默认配置，和其他一些配置。假定 ${basedir} 表示工程目录：\n\n| 配置项             | 默认值                         |\n|--------------------|-------------------------------|\n| source code        | ${basedir}/src/main/java      |\n| resources          | ${basedir}/src/main/resources |\n| Tests              | ${basedir}/src/test           |\n| Complied byte code | ${basedir}/target             |\n| distributable JAR  | ${basedir}/target/classes     |\n\n为了构建工程，Maven 为开发者提供了选项来配置生命周期目标和工程依赖（依赖于 Maven 的插件扩展功能和默认的约定）。大部分的工程管理和构建相关的任务是由 Maven 插件完成的。\n\n开发人员不需要了解每个插件是如何工作的，就能够构建任何给定的 Maven 工程。详细内容请参考 Maven 插件部分。\n\n### 环境配置 ###\n\nMaven 是一个基于 Java 的工具，所以要做的第一件事情就是安装 JDK。\n\n#### 系统要求 ####\n\n| 项目     | 要求                                                                                                                                    |\n|----------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| JDK      | Maven 3.3 要求 JDK 1.7 或以上<br/> Maven 3.2 要求 JDK 1.6 或以上<br/> Maven 3.0/3.1 要求 JDK 1.5 或以上                                           |\n| 内存     | 没有最低要求                                                                                                                            |\n| 磁盘     | Maven 自身安装需要大约 10 MB 空间。除此之外，额外的磁盘空间将用于你的本地 Maven 仓库。你本地仓库的大小取决于使用情况，但预期至少 500 MB |\n| 操作系统 | 没有最低要求|\n\n#### 步骤 1：检查 Java 安装 ####\n\n现在打开控制台，执行下面的 java 命令。\n\n| 操作系统 | 任务           | 命令                              |\n|----------|----------------|-----------------------------------|\n| Windows  | 打开命令控制台 | `c:\\> java -version`              |\n| Linux    | 打开命令终端   | `$ java -version`                 |\n| Mac      | 打开终端       | `machine:~ joseph$ java -version` |\n\n我们来验证一下所有平台上的输出：\n\n| 操作系统 | 输出                                                                                                                                              |\n|----------|---------------------------------------------------------------------------------------------------------------------------------------------------|\n| Windows  | java version \"1.6.0_21\"Java(TM) SE Runtime Environment (build 1.6.0_21-b07)Java HotSpot(TM) Client VM (build 17.0-b17, mixed mode, sharing)       |\n| Linux    | java version \"1.6.0_21\"Java(TM) SE Runtime Environment (build 1.6.0_21-b07)Java HotSpot(TM) Client VM (build 17.0-b17, mixed mode, sharing)       |\n| Mac      | java version \"1.6.0_21\"Java(TM) SE Runtime Environment (build 1.6.0_21-b07)Java HotSpot(TM)64-Bit Server VM (build 17.0-b17, mixed mode, sharing) |\n\n如果你没有安装 Java，从以下网址安装 Java 软件开发套件（SDK）：<br/>http://www.oracle.com/technetwork/java/javase/downloads/index.html\n\n#### 步骤 2：设置 Java 环境 ####\n\n设置 `JAVA_HOME` 环境变量，并指向你机器上的 Java 安装目录。例如：\n\n| 操作系统 | 输出                                                                        |\n|----------|-----------------------------------------------------------------------------|\n| Windows  | Set the environment variable JAVA_HOME to C:\\Program Files\\Java\\jdk1.6.0_21 |\n| Linux    | export JAVA_HOME=/usr/local/java-current                                    |\n| Mac      | export JAVA_HOME=/Library/Java/Home                                         |\n\n将 Java 编译器地址添加到系统路径中。\n\n| 操作系统 | 输出                                                                       |\n|----------|----------------------------------------------------------------------------|\n| Windows  | 将字符串“;C:\\Program Files\\Java\\jdk1.6.0_21\\bin”添加到系统变量“Path”的末尾 |\n| Linux    | export PATH=$PATH:$JAVA_HOME/bin/                                          |\n| Mac      | not required                                                               |\n\n使用上面提到的 java -version 命令验证 Java 安装。\n\n#### 步骤 3：下载 Maven 文件 ####\n\n从以下网址下载 Maven 3.2.5：<br/>http://maven.apache.org/download.html\n\n#### 步骤 4：解压 Maven 文件 ####\n\n解压文件到你想要的位置来安装 Maven 3.2.5，你会得到 apache-maven-3.2.5 子目录。\n\n| 操作系统 | 位置 (根据你的安装位置而定)                                    |\n|----------|----------------------------------------------------------------|\n| Windows  | C:\\Program Files\\Apache Software Foundation\\apache-maven-3.2.5 |\n| Linux    | /usr/local/apache-maven                                        |\n| Mac      | /usr/local/apache-maven                                        |\n\n#### 步骤 5：设置 Maven 环境变量 ####\n\n添加 M2_HOME、M2、MAVEN_OPTS 到环境变量中。\n\n| 操作系统 | 输出                                                                                                                                         |\n|----------|----------------------------------------------------------------------------------------------------------------------------------------------|\n| Windows  | 使用系统属性设置环境变量。<br/> M2_HOME=C:\\Program Files\\Apache Software Foundation\\apache-maven-3.2.5<br/> M2=%M2_HOME%\\bin<br/> MAVEN_OPTS=-Xms256m -Xmx512m |\n| Linux    | 打开命令终端设置环境变量。<br/> export M2_HOME=/usr/local/apache-maven/apache-maven-3.2.5export<br/> M2=$M2_HOME/binexport<br/> MAVEN_OPTS=-Xms256m -Xmx512m |\n| Mac      | 打开命令终端设置环境变量。<br/> export M2_HOME=/usr/local/apache-maven/apache-maven-3.2.5<br/> export M2=$M2_HOME/binexport<br/> MAVEN_OPTS=-Xms256m -Xmx512m |\n\n#### 步骤 6：添加 Maven bin 目录到系统路径中 ####\n\n现在添加 M2 变量到系统“Path”变量中\n\n| 操作系统 | 输出                                    |\n|----------|-----------------------------------------|\n| Windows  | 添加字符串 “;%M2%” 到系统“Path”变量末尾 |\n| Linux    | export PATH=$M2:$PATH                   |\n| Mac      | export PATH=$M2:$PATH                   |\n\n#### 步骤 7：验证 Maven 安装 ####\n\n现在打开控制台，执行以下 mvn 命令。\n\n| 操作系统 | 输出           | 命令                            |\n|----------|----------------|---------------------------------|\n| Windows  | 打开命令控制台 | `c:\\> mvn --version`              |\n| Linux    | 打开命令终端   | `$ mvn --version`                 |\n| Mac      | 打开终端       | `machine:~ joseph$ mvn --version` |\n\n最后，验证以上命令的输出，应该是像下面这样：\n\n| 操作系统 | 输出                                                                                                                         |\n|----------|------------------------------------------------------------------------------------------------------------------------------|\n| Windows  | Apache Maven 3.2.5 (r801777; 2009-08-07 00:46:01+0530)<br/>Java version: 1.6.0_21<br/>Java home: C:\\Program Files\\Java\\jdk1.6.0_21\\jre |\n| Linux    | Apache Maven 3.2.5 (r801777; 2009-08-07 00:46:01+0530)<br/>Java version: 1.6.0_21<br/>Java home: C:\\Program Files\\Java\\jdk1.6.0_21\\jre |\n| Mac      | Apache Maven 3.2.5 (r801777; 2009-08-07 00:46:01+0530)<br/>Java version: 1.6.0_21<br/>Java home: C:\\Program Files\\Java\\jdk1.6.0_21\\jre |\n\n恭喜！你完成了所有的设置，开始使用 Apache Maven 吧。\n\n### POM ###\n\nPOM 代表工程对象模型。它是使用 Maven 工作时的基本组件，是一个 xml 文件。它被放在工程根目录下，文件命名为 pom.xml。\n\nPOM 包含了关于工程和各种配置细节的信息，Maven 使用这些信息构建工程。\n\nPOM 也包含了目标和插件。当执行一个任务或者目标时，Maven 会查找当前目录下的 POM，从其中读取所需要的配置信息，然后执行目标。能够在 POM 中设置的一些配置如下：\n- project dependencies\n- plugins\n- goals\n- build profiles\n- project version\n- developers\n- mailing list\n\n在创建 POM 之前，我们首先确定工程组（groupId），及其名称（artifactId）和版本，在仓库中这些属性是工程的唯一标识。\n\n#### POM 举例 ####\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n\n   <groupId>com.companyname.project-group</groupId>\n   <artifactId>project</artifactId>\n   <version>1.0</version>\n\n</project>\n```\n\n需要说明的是每个工程应该只有一个 POM 文件。\n- 所有的 POM 文件需要 project 元素和三个必须的字段：groupId, artifactId,version。\n- 在仓库中的工程标识为 groupId:artifactId:version\n- POM.xml 的根元素是 project，它有三个主要的子节点：\n\n| 节点       | 描述                                                                                                                                            |\n|------------|-------------------------------------------------------------------------------------------------------------------------------------------------|\n| groupId    | 这是工程组的标识。它在一个组织或者项目中通常是唯一的。例如，一个银行组织 com.company.bank 拥有所有的和银行相关的项目。                          |\n| artifactId | 这是工程的标识。它通常是工程的名称。例如，消费者银行。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。                                |\n| version    | 这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。例如：com.company.bank:consumer-banking:1.0com.company.bank:consumer-banking:1.1. |\n\n#### Super POM ####\n\n所有的 POM 都继承自一个父 POM（无论是否显式定义了这个父 POM）。父 POM 也被称作 Super POM，它包含了一些可以被继承的默认设置。\n\nMaven 使用 effective pom（Super pom 加上工程自己的配置）来执行相关的目标，它帮助开发者在 pom.xml 中做尽可能少的配置，当然这些配置可以被方便的重写。\n\n查看 Super POM 默认配置的一个简单方法是执行以下命令：mvn help:effective-pom\n\n在你的电脑上的任意目录下创建一个 pom.xml 文件，使用上面提到的示例 pom 中的内容。\n\n在下面的例子中，我们在 C:\\MVN\\project 目录中创建了一个 pom.xml 文件。\n\n现在打开命令控制台，到 pom.xml 所在的目录下执行以下 mvn 命令。\n\n\tC:\\MVN\\project>mvn help:effective-pom\n\nMaven 将会开始处理并显示 effective-pom。\n```cmd\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'help'.\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Unnamed - com.companyname.project-group:project-name:jar:1.0\n[INFO]    task-segment: [help:effective-pom] (aggregator-style)\n[INFO] ------------------------------------------------------------------------\n[INFO] [help:effective-pom {execution: default-cli}]\n[INFO]\n\n.....\n\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Thu Jul 05 11:41:51 IST 2012\n[INFO] Final Memory: 6M/15M\n[INFO] ------------------------------------------------------------------------\n```\n\nEffective POM 的结果就像在控制台中显示的一样，经过继承、插值之后，使配置生效。\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- ================================================================= -->\n<!--                                                                   -->\n<!-- Generated by Maven Help Plugin on 2012-07-05T11:41:51             -->\n<!-- See: http://maven.apache.org/plugins/maven-help-plugin/           -->\n<!--                                                                   -->\n<!-- ================================================================= -->\n\n<!-- ================================================================= -->\n<!--                                                                   -->\n<!-- Effective POM for project                                         -->\n<!-- 'com.companyname.project-group:project-name:jar:1.0'              -->\n<!--                                                                   -->\n<!-- ================================================================= -->\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/\n2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 h\nttp://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.companyname.project-group</groupId>\n  <artifactId>project</artifactId>\n  <version>1.0</version>\n  <build>\n    <sourceDirectory>C:\\MVN\\project\\src\\main\\java</sourceDirectory>\n    <scriptSourceDirectory>src/main/scripts</scriptSourceDirectory>\n    <testSourceDirectory>C:\\MVN\\project\\src\\test\\java</testSourceDirectory>\n    <outputDirectory>C:\\MVN\\project\\target\\classes</outputDirectory>\n    <testOutputDirectory>C:\\MVN\\project\\target\\test-classes</testOutputDirectory>\n    <resources>\n      <resource>\n        <mergeId>resource-0</mergeId>\n        <directory>C:\\MVN\\project\\src\\main\\resources</directory>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <mergeId>resource-1</mergeId>\n        <directory>C:\\MVN\\project\\src\\test\\resources</directory>\n      </testResource>\n    </testResources>\n    <directory>C:\\MVN\\project\\target</directory>\n    <finalName>project-1.0</finalName>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <artifactId>maven-antrun-plugin</artifactId>\n          <version>1.3</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-assembly-plugin</artifactId>\n          <version>2.2-beta-2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-clean-plugin</artifactId>\n          <version>2.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>2.0.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-dependency-plugin</artifactId>\n          <version>2.0</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-deploy-plugin</artifactId>\n          <version>2.4</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-ear-plugin</artifactId>\n          <version>2.3.1</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-ejb-plugin</artifactId>\n          <version>2.1</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-install-plugin</artifactId>\n          <version>2.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-jar-plugin</artifactId>\n          <version>2.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-javadoc-plugin</artifactId>\n          <version>2.5</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-plugin-plugin</artifactId>\n          <version>2.4.3</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-rar-plugin</artifactId>\n          <version>2.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-release-plugin</artifactId>\n          <version>2.0-beta-8</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-resources-plugin</artifactId>\n          <version>2.3</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-site-plugin</artifactId>\n          <version>2.0-beta-7</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-source-plugin</artifactId>\n          <version>2.0.4</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <version>2.4.3</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-war-plugin</artifactId>\n          <version>2.1-alpha-2</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n    <plugins>\n      <plugin>\n        <artifactId>maven-help-plugin</artifactId>\n        <version>2.1.1</version>\n      </plugin>\n    </plugins>\n  </build>\n  <repositories>\n    <repository>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <id>central</id>\n      <name>Maven Repository Switchboard</name>\n      <url>http://repo1.maven.org/maven2</url>\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    <pluginRepository>\n      <releases>\n        <updatePolicy>never</updatePolicy>\n      </releases>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <id>central</id>\n      <name>Maven Plugin Repository</name>\n      <url>http://repo1.maven.org/maven2</url>\n    </pluginRepository>\n  </pluginRepositories>\n  <reporting>\n    <outputDirectory>C:\\MVN\\project\\target/site</outputDirectory>\n  </reporting>\n</project>\n```\n在上面的 pom.xml 中，你可以看到 Maven 在执行目标时需要用到的默认工程源码目录结构、输出目录、需要的插件、仓库和报表目录。\n\nMaven 的 pom.xml 文件也不需要手工编写。\n\nMaven 提供了大量的原型插件来创建工程，包括工程结构和 pom.xml。\n\n### 构建生命周期 ###\n\n#### 什么是构建生命周期 ####\n\n构建生命周期是一组阶段的序列（sequence of phases），每个阶段定义了目标被执行的顺序。这里的阶段是生命周期的一部分。\n\n举例说明，一个典型的 Maven 构建生命周期是由以下几个阶段的序列组成的：\n\n| 阶段              | 处理     | 描述                                                 |\n|-------------------|----------|------------------------------------------------------|\n| prepare-resources | 资源拷贝 | 本阶段可以自定义需要拷贝的资源                       |\n| compile           | 编译     | 本阶段完成源代码编译                                 |\n| package           | 打包     | 本阶段根据 pom.xml 中描述的打包配置创建 JAR / WAR 包 |\n| install           | 安装     | 本阶段在本地 / 远程仓库中安装工程包                  |\n\n当需要在某个特定阶段之前或之后执行目标时，可以使用 pre 和 post 来定义这个目标。\n\n当 Maven 开始构建工程，会按照所定义的阶段序列的顺序执行每个阶段注册的目标。Maven 有以下三个标准的生命周期：\n- clean\n- default(or build)\n- site\n\n**目标**表示一个特定的、对构建和管理工程有帮助的任务。它可能绑定了 0 个或多个构建阶段。没有绑定任何构建阶段的目标可以在构建生命周期之外被直接调用执行。\n\n执行的顺序依赖于目标和构建阶段被调用的顺序。例如，考虑下面的命令。clean 和 package 参数是构建阶段，而 dependency:copy-dependencies 是一个目标。\n\n\tmvn clean dependency:copy-dependencies package\n\n这里的 clean 阶段将会被首先执行，然后 dependency:copy-dependencies 目标会被执行，最终 package 阶段被执行。\n\n#### Clean 生命周期 ####\n\n当我们执行 mvn post-clean 命令时，Maven 调用 clean 生命周期，它包含以下阶段。\n- pre-clean\n- clean\n- post-clean\n\nMaven 的 clean 目标（clean:clean）绑定到了 clean 生命周期的 clean 阶段。它的 clean:clean 目标通过删除构建目录删除了构建输出。所以当 mvn clean 命令执行时，Maven 删除了构建目录。\n\n我们可以通过在上面的 clean 生命周期的任何阶段定义目标来修改这部分的操作行为。\n\n在下面的例子中，我们将 maven-antrun-plugin:run 目标添加到 pre-clean、clean 和 post-clean 阶段中。这样我们可以在 clean 生命周期的各个阶段显示文本信息。\n\n我们已经在 C:\\MVN\\project 目录下创建了一个 pom.xml 文件。\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<groupId>com.companyname.projectgroup</groupId>\n<artifactId>project</artifactId>\n<version>1.0</version>\n<build>\n<plugins>\n   <plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-antrun-plugin</artifactId>\n   <version>1.1</version>\n   <executions>\n      <execution>\n         <id>id.pre-clean</id>\n         <phase>pre-clean</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>pre-clean phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n      <execution>\n         <id>id.clean</id>\n         <phase>clean</phase>\n         <goals>\n          <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>clean phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n      <execution>\n         <id>id.post-clean</id>\n         <phase>post-clean</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>post-clean phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n   </executions>\n   </plugin>\n</plugins>\n</build>\n</project>\n```\n\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。\n\n\tC:\\MVN\\project>mvn post-clean\n\nMaven 将会开始处理并显示 clean 生命周期的所有阶段。\n```cmd\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------\n[INFO] Building Unnamed - com.companyname.projectgroup:project:jar:1.0\n[INFO]    task-segment: [post-clean]\n[INFO] ------------------------------------------------------------------\n[INFO] [antrun:run {execution: id.pre-clean}]\n[INFO] Executing tasks\n     [echo] pre-clean phase\n[INFO] Executed tasks\n[INFO] [clean:clean {execution: default-clean}]\n[INFO] [antrun:run {execution: id.clean}]\n[INFO] Executing tasks\n     [echo] clean phase\n[INFO] Executed tasks\n[INFO] [antrun:run {execution: id.post-clean}]\n[INFO] Executing tasks\n     [echo] post-clean phase\n[INFO] Executed tasks\n[INFO] ------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Sat Jul 07 13:38:59 IST 2012\n[INFO] Final Memory: 4M/44M\n[INFO] ------------------------------------------------------------------\n```\n你可以尝试修改 mvn clean 命令，来显示 pre-clean 和 clean，而在 post-clean 阶段不执行任何操作。\n\n#### Default (or Build) 生命周期 ####\n\n这是 Maven 的主要生命周期，被用于构建应用。包括下面的 23 个阶段。\n\n| 生命周期阶段          | 描述                                                                        |\n|-----------------------|-----------------------------------------------------------------------------|\n| validate              | 检查工程配置是否正确，完成构建过程的所有必要信息是否能够获取到。            |\n| initialize            | 初始化构建状态，例如设置属性。                                              |\n| generate-sources      | 生成编译阶段需要包含的任何源码文件。                                        |\n| process-sources       | 处理源代码，例如，过滤任何值（filter any value）。                          |\n| generate-resources    | 生成工程包中需要包含的资源文件。                                            |\n| process-resources     | 拷贝和处理资源文件到目的目录中，为打包阶段做准备。                          |\n| compile               | 编译工程源码。                                                              |\n| process-classes       | 处理编译生成的文件，例如 Java Class 字节码的加强和优化。                    |\n| generate-test-sources | 生成编译阶段需要包含的任何测试源代码。                                      |\n| process-test-sources  | 处理测试源代码，例如，过滤任何值（filter any values)。                      |\n| test-compile          | 编译测试源代码到测试目的目录。                                              |\n| process-test-classes  | 处理测试代码文件编译后生成的文件。                                          |\n| test                  | 使用适当的单元测试框架（例如JUnit）运行测试。                               |\n| prepare-package       | 在真正打包之前，为准备打包执行任何必要的操作。                              |\n| package               | 获取编译后的代码，并按照可发布的格式进行打包，例如 JAR、WAR 或者 EAR 文件。 |\n| pre-integration-test  | 在集成测试执行之前，执行所需的操作。例如，设置所需的环境变量。              |\n| integration-test      | 处理和部署必须的工程包到集成测试能够运行的环境中。                          |\n| post-integration-test | 在集成测试被执行后执行必要的操作。例如，清理环境。                          |\n| verify                | 运行检查操作来验证工程包是有效的，并满足质量要求。                          |\n| install               | 安装工程包到本地仓库中，该仓库可以作为本地其他工程的依赖。                  |\n| deploy                | 拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程。                  |\n\n有一些与 Maven 生命周期相关的重要概念需要说明：\n\n当一个阶段通过 Maven 命令调用时，例如 mvn compile，只有该阶段之前以及包括该阶段在内的所有阶段会被执行。\n\n不同的 maven 目标将根据打包的类型（JAR / WAR / EAR），被绑定到不同的 Maven 生命周期阶段。\n\n在下面的例子中，我们将 maven-antrun-plugin:run 目标添加到 Build 生命周期的一部分阶段中。这样我们可以显示生命周期的文本信息。\n\n我们已经更新了 C:\\MVN\\project 目录下的 pom.xml 文件。\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n  http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<groupId>com.companyname.projectgroup</groupId>\n<artifactId>project</artifactId>\n<version>1.0</version>\n<build>\n<plugins>\n<plugin>\n<groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-antrun-plugin</artifactId>\n<version>1.1</version>\n<executions>\n   <execution>\n      <id>id.validate</id>\n      <phase>validate</phase>\n      <goals>\n         <goal>run</goal>\n      </goals>\n      <configuration>\n         <tasks>\n            <echo>validate phase</echo>\n         </tasks>\n      </configuration>\n   </execution>\n   <execution>\n      <id>id.compile</id>\n      <phase>compile</phase>\n      <goals>\n         <goal>run</goal>\n      </goals>\n      <configuration>\n         <tasks>\n            <echo>compile phase</echo>\n         </tasks>\n      </configuration>\n   </execution>\n   <execution>\n      <id>id.test</id>\n      <phase>test</phase>\n      <goals>\n         <goal>run</goal>\n      </goals>\n      <configuration>\n         <tasks>\n            <echo>test phase</echo>\n         </tasks>\n      </configuration>\n   </execution>\n   <execution>\n         <id>id.package</id>\n         <phase>package</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n         <tasks>\n            <echo>package phase</echo>\n         </tasks>\n      </configuration>\n   </execution>\n   <execution>\n      <id>id.deploy</id>\n      <phase>deploy</phase>\n      <goals>\n         <goal>run</goal>\n      </goals>\n      <configuration>\n      <tasks>\n         <echo>deploy phase</echo>\n      </tasks>\n      </configuration>\n   </execution>\n</executions>\n</plugin>\n</plugins>\n</build>\n</project>\n```\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行以下 mvn 命令。\n\n\tC:\\MVN\\project>mvn compile\n\nMaven 将会开始处理并显示直到编译阶段的构建生命周期的各个阶段。\n```cmd\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------\n[INFO] Building Unnamed - com.companyname.projectgroup:project:jar:1.0\n[INFO]    task-segment: [compile]\n[INFO] ------------------------------------------------------------------\n[INFO] [antrun:run {execution: id.validate}]\n[INFO] Executing tasks\n     [echo] validate phase\n[INFO] Executed tasks\n[INFO] [resources:resources {execution: default-resources}]\n[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n[INFO] skip non existing resourceDirectory C:\\MVN\\project\\src\\main\\resources\n[INFO] [compiler:compile {execution: default-compile}]\n[INFO] Nothing to compile - all classes are up to date\n[INFO] [antrun:run {execution: id.compile}]\n[INFO] Executing tasks\n     [echo] compile phase\n[INFO] Executed tasks\n[INFO] ------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------\n[INFO] Total time: 2 seconds\n[INFO] Finished at: Sat Jul 07 20:18:25 IST 2012\n[INFO] Final Memory: 7M/64M\n[INFO] ------------------------------------------------------------------\n```\n\n#### Site 生命周期 ####\n\nMaven Site 插件一般用来创建新的报告文档、部署站点等。\n\n阶段：\n- pre-site\n- site\n- post-site\n- site-deploy\n\n在下面的例子中，我们将 maven-antrun-plugin:run 目标添加到 Site 生命周期的所有阶段中。这样我们可以显示生命周期的所有文本信息。\n\n我们已经更新了 C:\\MVN\\project 目录下的 pom.xml 文件。\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n  http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<groupId>com.companyname.projectgroup</groupId>\n<artifactId>project</artifactId>\n<version>1.0</version>\n<build>\n<plugins>\n<plugin>\n<groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-antrun-plugin</artifactId>\n<version>1.1</version>\n   <executions>\n      <execution>\n         <id>id.pre-site</id>\n         <phase>pre-site</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>pre-site phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n      <execution>\n         <id>id.site</id>\n         <phase>site</phase>\n         <goals>\n         <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>site phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n      <execution>\n         <id>id.post-site</id>\n         <phase>post-site</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>post-site phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n      <execution>\n         <id>id.site-deploy</id>\n         <phase>site-deploy</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>site-deploy phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n   </executions>\n</plugin>\n</plugins>\n</build>\n</project>\n```\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行以下 mvn 命令。\n\n\tC:\\MVN\\project>mvn site\n\nMaven 将会开始处理并显示直到 site 阶段的 site 生命周期的各个阶段。\n```cmd\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------\n[INFO] Building Unnamed - com.companyname.projectgroup:project:jar:1.0\n[INFO]    task-segment: [site]\n[INFO] ------------------------------------------------------------------\n[INFO] [antrun:run {execution: id.pre-site}]\n[INFO] Executing tasks\n     [echo] pre-site phase\n[INFO] Executed tasks\n[INFO] [site:site {execution: default-site}]\n[INFO] Generating \"About\" report.\n[INFO] Generating \"Issue Tracking\" report.\n[INFO] Generating \"Project Team\" report.\n[INFO] Generating \"Dependencies\" report.\n[INFO] Generating \"Project Plugins\" report.\n[INFO] Generating \"Continuous Integration\" report.\n[INFO] Generating \"Source Repository\" report.\n[INFO] Generating \"Project License\" report.\n[INFO] Generating \"Mailing Lists\" report.\n[INFO] Generating \"Plugin Management\" report.\n[INFO] Generating \"Project Summary\" report.\n[INFO] [antrun:run {execution: id.site}]\n[INFO] Executing tasks\n     [echo] site phase\n[INFO] Executed tasks\n[INFO] ------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------\n[INFO] Total time: 3 seconds\n[INFO] Finished at: Sat Jul 07 15:25:10 IST 2012\n[INFO] Final Memory: 24M/149M\n[INFO] ------------------------------------------------------------------\n```\n\n### 构建配置文件 ###\n\n#### 什么是构建配置文件？ ####\n\n构建配置文件是一组配置的集合，用来设置或者覆盖 Maven 构建的默认配置。使用构建配置文件，可以为不同的环境定制构建过程，例如 Producation 和 Development 环境。\n\nProfile 在 pom.xml 中使用 activeProfiles / profiles 元素指定，并且可以用很多方式触发。Profile 在构建时修改 POM，并且为变量设置不同的目标环境（例如，在开发、测试和产品环境中的数据库服务器路径）。\n\n#### Profile 类型 ####\n\nProfile 主要有三种类型。\n\n| 类型        | 在哪里定义                                                       |\n|-------------|------------------------------------------------------------------|\n| Per Project | 定义在工程 POM 文件 pom.xml 中                                   |\n| Per User    | 定义在 Maven 设置 xml 文件中 （%USER_HOME%/.m2/settings.xml）    |\n| Global      | 定义在 Maven 全局配置 xml 文件中 （%M2_HOME%/conf/settings.xml） |\n\n#### Profile 激活 ####\n\nMaven 的 Profile 能够通过几种不同的方式激活。\n- 显式使用命令控制台输入\n- 通过 maven 设置\n- 基于环境变量（用户 / 系统变量）\n- 操作系统配置（例如，Windows family）\n- 现存 / 缺失 文件\n\n#### Profile 激活示例 ####\n\n我们假定你的工程目录像下面这样：\n![](http://wiki.jikexueyuan.com/project/maven/images/6-structure.png)\n\n现在，在 src/main/resources 目录下有三个环境配置文件：\n\n| 文件名称            | 描述                         |\n|---------------------|------------------------------|\n| env.properties      | 没有配置文件时的默认配置     |\n| env.test.properties | 使用测试配置文件时的测试配置 |\n| env.prod.properties | 使用产品配置文件时的产品配置 |\n\n#### 显式 Profile 激活 ####\n\n在接下来的例子中，我们将 attach maven-antrun-plugin:run 目标添加到测试阶段中。这样可以我们在不同的 Profile 中输出文本信息。我们将使用 pom.xml 来定义不同的 Profile，并在命令控制台中使用 maven 命令激活 Profile。\n\n假定，我们在 C:\\MVN\\project 目录下创建了以下的 pom.xml 文件。\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>com.companyname.projectgroup</groupId>\n   <artifactId>project</artifactId>\n   <version>1.0</version>\n   <profiles>\n      <profile>\n      <id>test</id>\n      <build>\n      <plugins>\n         <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-antrun-plugin</artifactId>\n            <version>1.1</version>\n            <executions>\n               <execution>\n                  <phase>test</phase>\n                  <goals>\n                     <goal>run</goal>\n                  </goals>\n                  <configuration>\n                  <tasks>\n                     <echo>Using env.test.properties</echo>\n            <copy file=\"src/main/resources/env.test.propertiestofile\n            =\"${project.build.outputDirectory}/env.properties\"/>\n                  </tasks>\n                  </configuration>\n               </execution>\n            </executions>\n         </plugin>\n      </plugins>\n      </build>\n      </profile>\n   </profiles>\n</project>\n```\n\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行以下 mvn 命令。使用 -P 选项指定 Profile 的名称。\n\n\tC:\\MVN\\project>mvn test -Ptest\n\nMaven 将开始处理并显示 test Profile 的结果。\n\n```cmd\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------\n[INFO] Building Unnamed - com.companyname.projectgroup:project:jar:1.0\n[INFO]    task-segment: [test]\n[INFO] ------------------------------------------------------------------\n[INFO] [resources:resources {execution: default-resources}]\n[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n[INFO] Copying 3 resources\n[INFO] [compiler:compile {execution: default-compile}]\n[INFO] Nothing to compile - all classes are up to date\n[INFO] [resources:testResources {execution: default-testResources}]\n[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n[INFO] skip non existing resourceDirectory C:\\MVN\\project\\src\\test\\resources\n[INFO] [compiler:testCompile {execution: default-testCompile}]\n[INFO] Nothing to compile - all classes are up to date\n[INFO] [surefire:test {execution: default-test}]\n[INFO] Surefire report directory: C:\\MVN\\project\\target\\surefire-reports\n\n-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nThere are no tests to run.\n\nResults :\n\nTests run: 0, Failures: 0, Errors: 0, Skipped: 0\n\n[INFO] [antrun:run {execution: default}]\n[INFO] Executing tasks\n     [echo] Using env.test.properties\n[INFO] Executed tasks\n[INFO] ------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Sun Jul 08 14:55:41 IST 2012\n[INFO] Final Memory: 8M/64M\n[INFO] ------------------------------------------------------------------\n```\n\n现在我们练习一下，你可以按照下面的步骤做：\n- 在 pom.xml 的 profiles 元素中添加另一个 profile 元素（拷贝已有的 profile 元素并粘贴到 profiles 元素结尾）。\n- 将此 profile 元素的 id 从 test 修改为 normal。\n- 将任务部分修改为 echo env.properties，以及 copy env.properties 到目标目录\n- 再次重复以上三个步骤，修改 id 为 prod，修改 task 部分为 env.prod.properties\n- 全部就这些了。现在你有了三个构建配置文件（normal / test / prod）。\n\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。使用 -P 选项指定 Profile 的名称。\n\n\tC:\\MVN\\project>mvn test -Pnormal\n\tC:\\MVN\\project>mvn test -Pprod\n\n检查构建的输出看看有什么不同。\n\n#### 通过 Maven 设置激活 Profile ####\n\n打开 Maven 的 settings.xml 文件，该文件可以在 %USER_HOME%/.m2 目录下找到，%USER_HOME% 表示用户主目录。如果 settings.xml 文件不存在则需要创建一个。\n\n像在下面例子中展示的一样，使用 activeProfiles 节点添加 test 配置作为激活的 Profile。\n```xml\n<settings xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n   <mirrors>\n      <mirror>\n         <id>maven.dev.snaponglobal.com</id>\n         <name>Internal Artifactory Maven repository</name>\n         <url>http://repo1.maven.org/maven2/</url>\n         <mirrorOf>*</mirrorOf>\n      </mirror>\n   </mirrors>\n   <activeProfiles>\n      <activeProfile>test</activeProfile>\n   </activeProfiles>\n</settings>\n```\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。不要使用 -P 选项指定 Profile 的名称。Maven 将显示被激活的 test Profile 的结果。\n\n\tC:\\MVN\\project>mvn test\n\n#### 通过环境变量激活 Profile ####\n\n现在从 maven 的 settings.xml 中删除激活的 Profile，并更新 pom.xml 中的 test Profile。将下面的内容添加到 profile 元素的 activation 元素中。\n\n当系统属性 “env” 被设置为 “test” 时，test 配置将会被触发。创建一个环境变量 “env” 并设置它的值为 “test”。\n\n```xml\n<profile>\n   <id>test</id>\n   <activation>\n      <property>\n         <name>env</name>\n         <value>test</value>\n      </property>\n   </activation>\n</profile>\n```\n\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。\n\n\tC:\\MVN\\project>mvn test\n\n#### 通过操作系统激活 Profile ####\n\nactivation 元素包含下面的操作系统信息。当系统为 windows XP 时，test Profile 将会被触发。\n```xml\n<profile>\n   <id>test</id>\n   <activation>\n      <os>\n         <name>Windows XP</name>\n         <family>Windows</family>\n         <arch>x86</arch>\n         <version>5.1.2600</version>\n      </os>\n   </activation>\n</profile>\n```\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。不要使用 -P 选项指定 Profile 的名称。Maven 将显示被激活的 test Profile 的结果。\n\n\tC:\\MVN\\project>mvn test\n\n#### 通过现存 / 缺失的文件激活 Profile ####\n\n现在使用 activation 元素包含下面的操作系统信息。\n当 target/generated-sources/axistools/wsdl2java/com/companyname/group 缺失时，test Profile 将会被触发。\n```xml\n<profile>\n   <id>test</id>\n   <activation>\n      <file>\n         <missing>target/generated-sources/axistools/wsdl2java/\n         com/companyname/group</missing>\n      </file>\n   </activation>\n</profile>\n```\n\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。不要使用 -P 选项指定 Profile 的名称。Maven 将显示被激活的 test Profile 的结果。\n\n\tC:\\MVN\\project>mvn test\n\n### 仓库 ###\n\n#### 什么是 Maven 仓库？ ####\n\n在 Maven 的术语中，仓库是一个位置（place），例如目录，可以存储所有的工程 jar 文件、library jar 文件、插件或任何其他的工程指定的文件。\n\nMaven 仓库有三种类型：\n- 本地（local）\n- 中央（central）\n- 远程（remote）\n\n#### 本地仓库 ####\n\nMaven 本地仓库是机器上的一个文件夹。它在你第一次运行任何 maven 命令的时候创建。\n\nMaven 本地仓库保存你的工程的所有依赖（library jar、plugin jar 等）。当你运行一次 Maven 构建，Maven 会自动下载所有依赖的 jar 文件到本地仓库中。它避免了每次构建时都引用存放在远程机器上的依赖文件。\n\nMaven 本地仓库默认被创建在 %USER_HOME% 目录下。要修改默认位置，在 %M2_HOME%\\conf 目录中的 Maven 的 settings.xml 文件中定义另一个路径。\n```xml\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 \n   http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n      <localRepository>C:/MyLocalRepository</localRepository>\n</settings>\n```\n当你运行 Maven 命令，Maven 将下载依赖的文件到你指定的路径中。\n\n#### 中央仓库 ####\n\nMaven 中央仓库是由 Maven 社区提供的仓库，其中包含了大量常用的库。\n中央仓库的关键概念：\n- 这个仓库由 Maven 社区管理。\n- 不需要配置。\n- 需要通过网络才能访问。\n\n要浏览中央仓库的内容，maven 社区提供了一个 URL：[http://search.maven.org/#browse](http://search.maven.org/#browse \"http://search.maven.org/#browse\")。使用这个仓库，开发人员可以搜索所有可以获取的代码库。\n\n#### 远程仓库 ####\n\n如果 Maven 在中央仓库中也找不到依赖的库文件，它会停止构建过程并输出错误信息到控制台。为避免这种情况，Maven 提供了远程仓库的概念，它是开发人员自己定制仓库，包含了所需要的代码库或者其他工程中用到的 jar 文件。\n\n举例说明，使用下面的 POM.xml，Maven 将从远程仓库中下载该 pom.xml 中声明的所依赖的（在中央仓库中获取不到的）文件。\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>com.companyname.projectgroup</groupId>\n   <artifactId>project</artifactId>\n   <version>1.0</version>\n   <dependencies>\n      <dependency>\n         <groupId>com.companyname.common-lib</groupId>\n         <artifactId>common-lib</artifactId>\n         <version>1.0.0</version>\n      </dependency>\n   <dependencies>\n   <repositories>\n      <repository>\n         <id>companyname.lib1</id>\n         <url>http://download.companyname.org/maven2/lib1</url>\n      </repository>\n      <repository>\n         <id>companyname.lib2</id>\n         <url>http://download.companyname.org/maven2/lib2</url>\n      </repository>\n   </repositories>\n</project>\n```\n\n#### Maven 依赖搜索顺序 ####\n\n当我们执行 Maven 构建命令时，Maven 开始按照以下顺序查找依赖的库：\n- 步骤 1 － 在本地仓库中搜索，如果找不到，执行步骤 2，如果找到了则执行其他操作。\n- 步骤 2 － 在中央仓库中搜索，如果找不到，并且有一个或多个远程仓库已经设置，则执行步骤 4，如果找到了则下载到本地仓库中已被将来引用。\n- 步骤 3 － 如果远程仓库没有被设置，Maven 将简单的停滞处理并抛出错误（无法找到依赖的文件）。\n- 步骤 4 － 在一个或多个远程仓库中搜索依赖的文件，如果找到则下载到本地仓库已被将来引用，否则 Maven 将停止处理并抛出错误（无法找到依赖的文件）。\n\n### 插件 ###\n\n#### 什么是 Maven 插件？ ####\n\nMaven 实际上是一个依赖插件执行的框架，每个任务实际上是由插件完成。Maven 插件通常被用来：\n- 创建 jar 文件\n- 创建 war 文件\n- 编译代码文件\n- 代码单元测试\n- 创建工程文档\n- 创建工程报告\n\n插件通常提供了一个目标的集合，并且可以使用下面的语法执行：\n\n\tmvn [plugin-name]:[goal-name]\n\n例如，一个 Java 工程可以使用 maven-compiler-plugin 的 compile-goal 编译，使用以下命令：\n\n\tmvn compiler:compile\n\n#### 插件类型 ####\n\nMaven 提供了下面两种类型的插件：\n\n| 类型              | 描述                                               |\n|-------------------|----------------------------------------------------|\n| Build plugins     | 在构建时执行，并在 pom.xml 的 元素中配置。         |\n| Reporting plugins | 在网站生成过程中执行，并在 pom.xml 的 元素中配置。 |\n\n下面是一些常用插件的列表：\n\n| 插件     | 描述                                                |\n|----------|-----------------------------------------------------|\n| clean    | 构建之后清理目标文件。删除目标目录。                |\n| compiler | 编译 Java 源文件。                                  |\n| surefile | 运行 JUnit 单元测试。创建测试报告。                 |\n| jar      | 从当前工程中构建 JAR 文件。                         |\n| war      | 从当前工程中构建 WAR 文件。                         |\n| javadoc  | 为工程生成 Javadoc。                                |\n| antrun   | 从构建过程的任意一个阶段中运行一个 ant 任务的集合。 |\n\n#### 例子 ####\n\n我们已经在我们的例子中大量使用了 **maven-antrun-plugin** 来输出数据到控制台上。请查看 **Maven - 构建配置文件** 章节。让我们用一种更好的方式理解这部分内容，在 C:\\MVN\\project 目录下创建一个 pom.xml 文件。\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n    http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<groupId>com.companyname.projectgroup</groupId>\n<artifactId>project</artifactId>\n<version>1.0</version>\n<build>\n<plugins>\n   <plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-antrun-plugin</artifactId>\n   <version>1.1</version>\n   <executions>\n      <execution>\n         <id>id.clean</id>\n         <phase>clean</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>clean phase</echo>\n            </tasks>\n         </configuration>\n      </execution>     \n   </executions>\n   </plugin>\n</plugins>\n</build>\n</project>\n```\n接下来，打开命令终端跳转到 pom.xml 所在的目录，并执行下面的 mvn 命令。\n\n\tC:\\MVN\\project>mvn clean\n\nMaven 将开始处理并显示 clean 生命周期的 clean 阶段。\n```cmd\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------\n[INFO] Building Unnamed - com.companyname.projectgroup:project:jar:1.0\n[INFO]    task-segment: [post-clean]\n[INFO] ------------------------------------------------------------------\n[INFO] [clean:clean {execution: default-clean}]\n[INFO] [antrun:run {execution: id.clean}]\n[INFO] Executing tasks\n     [echo] clean phase\n[INFO] Executed tasks\n[INFO] ------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Sat Jul 07 13:38:59 IST 2012\n[INFO] Final Memory: 4M/44M\n[INFO] ------------------------------------------------------------------\n```\n上面的例子展示了以下关键概念：\n- 插件是在 pom.xml 中使用 plugins 元素定义的。\n- 每个插件可以有多个目标。\n- 你可以定义阶段，插件会使用它的 phase 元素开始处理。我们已经使用了 **clean** 阶段。\n- 你可以通过绑定到插件的目标的方式来配置要执行的任务。我们已经绑定了 **echo** 任务到 maven-antrun-plugin 的 **run** 目标。\n- 就是这样，Maven 将处理剩下的事情。它将下载本地仓库中获取不到的插件，并开始处理。\n\n### 创建工程 ###\n\nMaven 使用原型（archetype）插件创建工程。要创建一个简单的 Java 应用，我们将使用 maven-archetype-quickstart 插件。在下面的例子中，我们将在 C:\\MVN 文件夹下创建一个基于 maven 的 java 应用工程。\n\n我们打开命令控制台，跳转到 C:\\MVN 目录，并执行下面的 mvn 命令。\n```cmd\nC:\\MVN>mvn archetype:generate\n-DgroupId=com.companyname.bank \n-DartifactId=consumerBanking \n-DarchetypeArtifactId=maven-archetype-quickstart \n-DinteractiveMode=false\n```\nMaven 将开始处理，并将创建完成的 java 应用工程结构。\n```cmd\nINFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'archetype'.\n[INFO] -------------------------------------------------------------------\n[INFO] Building Maven Default Project\n[INFO]    task-segment: [archetype:generate] (aggregator-style)\n[INFO] -------------------------------------------------------------------\n[INFO] Preparing archetype:generate\n[INFO] No goals needed for project - skipping\n[INFO] [archetype:generate {execution: default-cli}]\n[INFO] Generating project in Batch mode\n[INFO] -------------------------------------------------------------------\n[INFO] Using following parameters for creating project \n from Old (1.x) Archetype: maven-archetype-quickstart:1.0\n[INFO] -------------------------------------------------------------------\n[INFO] Parameter: groupId, Value: com.companyname.bank\n[INFO] Parameter: packageName, Value: com.companyname.bank\n[INFO] Parameter: package, Value: com.companyname.bank\n[INFO] Parameter: artifactId, Value: consumerBanking\n[INFO] Parameter: basedir, Value: C:\\MVN\n[INFO] Parameter: version, Value: 1.0-SNAPSHOT\n[INFO] project created from Old (1.x) Archetype in dir: C:\\MVN\\consumerBanking\n[INFO] ------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------\n[INFO] Total time: 14 seconds\n[INFO] Finished at: Tue Jul 10 15:38:58 IST 2012\n[INFO] Final Memory: 21M/124M\n[INFO] ------------------------------------------------------------------\n```\n现在跳转到 C:/MVN 目录。有将看到一个名为 consumerBanking 的 java 应用工程（就像在 artifactId 中设定的一样）。Maven 使用一套标准的目录结构，就像这样：\n![](http://wiki.jikexueyuan.com/project/maven/images/9-project-structure.jpg)\n使用上面的例子，我们可以知道下面几个关键概念：\n\n| 文件夹结构             | 描述                                                                  |\n|------------------------|-----------------------------------------------------------------------|\n| consumerBanking        | 包含 src 文件夹和 pom.xml                                             |\n| src/main/java contains | java 代码文件在包结构下（com/companyName/bank）。                     |\n| src/main/test contains | 测试代码文件在包结构下（com/companyName/bank）。                      |\n| src/main/resources     | 包含了 图片 / 属性 文件（在上面的例子中，我们需要手动创建这个结构）。 |\n\nMaven 也创建了一个简单的 Java 源文件和 Java 测试文件。打开 \nC:\\MVN\\consumerBanking\\src\\main\\java\\com\\companyname\\bank 文件夹，可以看到 App.java 文件。\n```java\npackage com.companyname.bank;\n\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static void main( String[] args )\n    {\n        System.out.println( \"Hello World!\" );\n    }\n}\n```\n打开 C:\\MVN\\consumerBanking\\src\\test\\java\\com\\companyname\\bank 文件夹，可以看到 AppTest.java。\n```java\npackage com.companyname.bank;\n\nimport junit.framework.Test;\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\n/**\n * Unit test for simple App.\n */\npublic class AppTest extends TestCase \n{\n    /**\n     * Create the test case\n     *\n     * @param testName name of the test case\n     */\n    public AppTest( String testName )\n    {\n        super( testName );\n    }\n\n    /**\n     * @return the suite of tests being tested\n     */\n    public static Test suite()\n    {\n        return new TestSuite( AppTest.class );\n    }\n\n    /**\n     * Rigourous Test :-)\n     */\n    public void testApp()\n    {\n        assertTrue( true );\n    }\n}\n```\n开发人员需要将他们的文件按照上面表格中提到的结构放置好，接下来 Maven 将会搞定所有构建相关的复杂任务。\n\n### 构建 & 测试工程 ###\n\n\n\n### 外部依赖 ###\n\n### 工程文档 ###\n\n### 工程模板 ###\n\n### 快照 ###\n\n### 构建自动化 ###\n\n### 管理依赖 ###\n\n### 自动化部署 ###\n\n### Web应用 ###\n\n### Eclipse IDE ###\n\n### NetBeans ###\n\n### IntelliJ IDEA ###\n\n***转载自[极客学院](http://wiki.jikexueyuan.com/project/maven/ \"极客学院\")***","source":"_posts/2016-02-26-Maven.md","raw":"---\ntitle: Maven的使用\ncomments: true\ndate: 2016-02-26 09:19:43\ncategories:\ntags:\n\t- Maven\n---\n\n### 概述 ###\n\n#### Maven 是什么？ ####\nMaven 是一个项目管理和整合工具。Maven 为开发者提供了一套完整的构建生命周期框架。开发团队几乎不用花多少时间就能够自动完成工程的基础构建配置，因为 Maven 使用了一个标准的目录结构和一个默认的构建生命周期。\n\n在有多个开发团队环境的情况下，Maven 能够在很短的时间内使得每项工作都按照标准进行。因为大部分的工程配置操作都非常简单并且可复用，在创建报告、检查、构建和测试自动配置时，Maven 可以让开发者的工作变得更简单。\n\nMaven 能够帮助开发者完成以下工作：\n- 构建\n- 文档生成\n- 报告\n- 依赖\n- SCMs\n- 发布\n- 分发\n- 邮件列表\n\n总的来说，Maven 简化了工程的构建过程，并对其标准化。它无缝衔接了编译、发布、文档生成、团队合作和其他任务。Maven 提高了重用性，负责了大部分构建相关的任务。\n\n#### Maven 的历史 ####\nMaven 最初是在 Jakarta Turbine 项目中为了简化构建过程而设计的。项目中有几个子工程，每个工程包含稍有不同的 ANT 文件。JAR 文件使用 CVS 管理。\n\nApache 小组随后开发了 Maven，能够同时构建多个工程、发布工程信息、部署工程、在几个工程中共享 JAR 文件，并且协助团队合作\n\n#### Maven 的目标 ####\nMaven 的主要目的是为开发者提供\n- 一个可复用、可维护、更易理解的工程综合模型\n- 与这个模型交互的插件或者工具\n\nMaven 工程结构和内容被定义在一个 xml 文件中 － pom.xml，是 Project Object Model (POM) 的简称，此文件是整个 Maven 系统的基础组件。\n\n#### 约定优于配置 ####\nMaven 使用约定而不是配置，意味着开发者不需要再自己创建构建过程。\n\n开发者不需要再关心每一个配置细节。Maven 为工程提供了合理的默认行为。当创建 Maven 工程时，Maven 会创建默认的工程结构。开发者只需要合理的放置文件，而在 pom.xml 中不再需要定义任何配置。\n\n举例说明，下面的表格展示了工程源码文件、资源文件的默认配置，和其他一些配置。假定 ${basedir} 表示工程目录：\n\n| 配置项             | 默认值                         |\n|--------------------|-------------------------------|\n| source code        | ${basedir}/src/main/java      |\n| resources          | ${basedir}/src/main/resources |\n| Tests              | ${basedir}/src/test           |\n| Complied byte code | ${basedir}/target             |\n| distributable JAR  | ${basedir}/target/classes     |\n\n为了构建工程，Maven 为开发者提供了选项来配置生命周期目标和工程依赖（依赖于 Maven 的插件扩展功能和默认的约定）。大部分的工程管理和构建相关的任务是由 Maven 插件完成的。\n\n开发人员不需要了解每个插件是如何工作的，就能够构建任何给定的 Maven 工程。详细内容请参考 Maven 插件部分。\n\n### 环境配置 ###\n\nMaven 是一个基于 Java 的工具，所以要做的第一件事情就是安装 JDK。\n\n#### 系统要求 ####\n\n| 项目     | 要求                                                                                                                                    |\n|----------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| JDK      | Maven 3.3 要求 JDK 1.7 或以上<br/> Maven 3.2 要求 JDK 1.6 或以上<br/> Maven 3.0/3.1 要求 JDK 1.5 或以上                                           |\n| 内存     | 没有最低要求                                                                                                                            |\n| 磁盘     | Maven 自身安装需要大约 10 MB 空间。除此之外，额外的磁盘空间将用于你的本地 Maven 仓库。你本地仓库的大小取决于使用情况，但预期至少 500 MB |\n| 操作系统 | 没有最低要求|\n\n#### 步骤 1：检查 Java 安装 ####\n\n现在打开控制台，执行下面的 java 命令。\n\n| 操作系统 | 任务           | 命令                              |\n|----------|----------------|-----------------------------------|\n| Windows  | 打开命令控制台 | `c:\\> java -version`              |\n| Linux    | 打开命令终端   | `$ java -version`                 |\n| Mac      | 打开终端       | `machine:~ joseph$ java -version` |\n\n我们来验证一下所有平台上的输出：\n\n| 操作系统 | 输出                                                                                                                                              |\n|----------|---------------------------------------------------------------------------------------------------------------------------------------------------|\n| Windows  | java version \"1.6.0_21\"Java(TM) SE Runtime Environment (build 1.6.0_21-b07)Java HotSpot(TM) Client VM (build 17.0-b17, mixed mode, sharing)       |\n| Linux    | java version \"1.6.0_21\"Java(TM) SE Runtime Environment (build 1.6.0_21-b07)Java HotSpot(TM) Client VM (build 17.0-b17, mixed mode, sharing)       |\n| Mac      | java version \"1.6.0_21\"Java(TM) SE Runtime Environment (build 1.6.0_21-b07)Java HotSpot(TM)64-Bit Server VM (build 17.0-b17, mixed mode, sharing) |\n\n如果你没有安装 Java，从以下网址安装 Java 软件开发套件（SDK）：<br/>http://www.oracle.com/technetwork/java/javase/downloads/index.html\n\n#### 步骤 2：设置 Java 环境 ####\n\n设置 `JAVA_HOME` 环境变量，并指向你机器上的 Java 安装目录。例如：\n\n| 操作系统 | 输出                                                                        |\n|----------|-----------------------------------------------------------------------------|\n| Windows  | Set the environment variable JAVA_HOME to C:\\Program Files\\Java\\jdk1.6.0_21 |\n| Linux    | export JAVA_HOME=/usr/local/java-current                                    |\n| Mac      | export JAVA_HOME=/Library/Java/Home                                         |\n\n将 Java 编译器地址添加到系统路径中。\n\n| 操作系统 | 输出                                                                       |\n|----------|----------------------------------------------------------------------------|\n| Windows  | 将字符串“;C:\\Program Files\\Java\\jdk1.6.0_21\\bin”添加到系统变量“Path”的末尾 |\n| Linux    | export PATH=$PATH:$JAVA_HOME/bin/                                          |\n| Mac      | not required                                                               |\n\n使用上面提到的 java -version 命令验证 Java 安装。\n\n#### 步骤 3：下载 Maven 文件 ####\n\n从以下网址下载 Maven 3.2.5：<br/>http://maven.apache.org/download.html\n\n#### 步骤 4：解压 Maven 文件 ####\n\n解压文件到你想要的位置来安装 Maven 3.2.5，你会得到 apache-maven-3.2.5 子目录。\n\n| 操作系统 | 位置 (根据你的安装位置而定)                                    |\n|----------|----------------------------------------------------------------|\n| Windows  | C:\\Program Files\\Apache Software Foundation\\apache-maven-3.2.5 |\n| Linux    | /usr/local/apache-maven                                        |\n| Mac      | /usr/local/apache-maven                                        |\n\n#### 步骤 5：设置 Maven 环境变量 ####\n\n添加 M2_HOME、M2、MAVEN_OPTS 到环境变量中。\n\n| 操作系统 | 输出                                                                                                                                         |\n|----------|----------------------------------------------------------------------------------------------------------------------------------------------|\n| Windows  | 使用系统属性设置环境变量。<br/> M2_HOME=C:\\Program Files\\Apache Software Foundation\\apache-maven-3.2.5<br/> M2=%M2_HOME%\\bin<br/> MAVEN_OPTS=-Xms256m -Xmx512m |\n| Linux    | 打开命令终端设置环境变量。<br/> export M2_HOME=/usr/local/apache-maven/apache-maven-3.2.5export<br/> M2=$M2_HOME/binexport<br/> MAVEN_OPTS=-Xms256m -Xmx512m |\n| Mac      | 打开命令终端设置环境变量。<br/> export M2_HOME=/usr/local/apache-maven/apache-maven-3.2.5<br/> export M2=$M2_HOME/binexport<br/> MAVEN_OPTS=-Xms256m -Xmx512m |\n\n#### 步骤 6：添加 Maven bin 目录到系统路径中 ####\n\n现在添加 M2 变量到系统“Path”变量中\n\n| 操作系统 | 输出                                    |\n|----------|-----------------------------------------|\n| Windows  | 添加字符串 “;%M2%” 到系统“Path”变量末尾 |\n| Linux    | export PATH=$M2:$PATH                   |\n| Mac      | export PATH=$M2:$PATH                   |\n\n#### 步骤 7：验证 Maven 安装 ####\n\n现在打开控制台，执行以下 mvn 命令。\n\n| 操作系统 | 输出           | 命令                            |\n|----------|----------------|---------------------------------|\n| Windows  | 打开命令控制台 | `c:\\> mvn --version`              |\n| Linux    | 打开命令终端   | `$ mvn --version`                 |\n| Mac      | 打开终端       | `machine:~ joseph$ mvn --version` |\n\n最后，验证以上命令的输出，应该是像下面这样：\n\n| 操作系统 | 输出                                                                                                                         |\n|----------|------------------------------------------------------------------------------------------------------------------------------|\n| Windows  | Apache Maven 3.2.5 (r801777; 2009-08-07 00:46:01+0530)<br/>Java version: 1.6.0_21<br/>Java home: C:\\Program Files\\Java\\jdk1.6.0_21\\jre |\n| Linux    | Apache Maven 3.2.5 (r801777; 2009-08-07 00:46:01+0530)<br/>Java version: 1.6.0_21<br/>Java home: C:\\Program Files\\Java\\jdk1.6.0_21\\jre |\n| Mac      | Apache Maven 3.2.5 (r801777; 2009-08-07 00:46:01+0530)<br/>Java version: 1.6.0_21<br/>Java home: C:\\Program Files\\Java\\jdk1.6.0_21\\jre |\n\n恭喜！你完成了所有的设置，开始使用 Apache Maven 吧。\n\n### POM ###\n\nPOM 代表工程对象模型。它是使用 Maven 工作时的基本组件，是一个 xml 文件。它被放在工程根目录下，文件命名为 pom.xml。\n\nPOM 包含了关于工程和各种配置细节的信息，Maven 使用这些信息构建工程。\n\nPOM 也包含了目标和插件。当执行一个任务或者目标时，Maven 会查找当前目录下的 POM，从其中读取所需要的配置信息，然后执行目标。能够在 POM 中设置的一些配置如下：\n- project dependencies\n- plugins\n- goals\n- build profiles\n- project version\n- developers\n- mailing list\n\n在创建 POM 之前，我们首先确定工程组（groupId），及其名称（artifactId）和版本，在仓库中这些属性是工程的唯一标识。\n\n#### POM 举例 ####\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n\n   <groupId>com.companyname.project-group</groupId>\n   <artifactId>project</artifactId>\n   <version>1.0</version>\n\n</project>\n```\n\n需要说明的是每个工程应该只有一个 POM 文件。\n- 所有的 POM 文件需要 project 元素和三个必须的字段：groupId, artifactId,version。\n- 在仓库中的工程标识为 groupId:artifactId:version\n- POM.xml 的根元素是 project，它有三个主要的子节点：\n\n| 节点       | 描述                                                                                                                                            |\n|------------|-------------------------------------------------------------------------------------------------------------------------------------------------|\n| groupId    | 这是工程组的标识。它在一个组织或者项目中通常是唯一的。例如，一个银行组织 com.company.bank 拥有所有的和银行相关的项目。                          |\n| artifactId | 这是工程的标识。它通常是工程的名称。例如，消费者银行。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。                                |\n| version    | 这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。例如：com.company.bank:consumer-banking:1.0com.company.bank:consumer-banking:1.1. |\n\n#### Super POM ####\n\n所有的 POM 都继承自一个父 POM（无论是否显式定义了这个父 POM）。父 POM 也被称作 Super POM，它包含了一些可以被继承的默认设置。\n\nMaven 使用 effective pom（Super pom 加上工程自己的配置）来执行相关的目标，它帮助开发者在 pom.xml 中做尽可能少的配置，当然这些配置可以被方便的重写。\n\n查看 Super POM 默认配置的一个简单方法是执行以下命令：mvn help:effective-pom\n\n在你的电脑上的任意目录下创建一个 pom.xml 文件，使用上面提到的示例 pom 中的内容。\n\n在下面的例子中，我们在 C:\\MVN\\project 目录中创建了一个 pom.xml 文件。\n\n现在打开命令控制台，到 pom.xml 所在的目录下执行以下 mvn 命令。\n\n\tC:\\MVN\\project>mvn help:effective-pom\n\nMaven 将会开始处理并显示 effective-pom。\n```cmd\n[INFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'help'.\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Unnamed - com.companyname.project-group:project-name:jar:1.0\n[INFO]    task-segment: [help:effective-pom] (aggregator-style)\n[INFO] ------------------------------------------------------------------------\n[INFO] [help:effective-pom {execution: default-cli}]\n[INFO]\n\n.....\n\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Thu Jul 05 11:41:51 IST 2012\n[INFO] Final Memory: 6M/15M\n[INFO] ------------------------------------------------------------------------\n```\n\nEffective POM 的结果就像在控制台中显示的一样，经过继承、插值之后，使配置生效。\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- ================================================================= -->\n<!--                                                                   -->\n<!-- Generated by Maven Help Plugin on 2012-07-05T11:41:51             -->\n<!-- See: http://maven.apache.org/plugins/maven-help-plugin/           -->\n<!--                                                                   -->\n<!-- ================================================================= -->\n\n<!-- ================================================================= -->\n<!--                                                                   -->\n<!-- Effective POM for project                                         -->\n<!-- 'com.companyname.project-group:project-name:jar:1.0'              -->\n<!--                                                                   -->\n<!-- ================================================================= -->\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/\n2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 h\nttp://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.companyname.project-group</groupId>\n  <artifactId>project</artifactId>\n  <version>1.0</version>\n  <build>\n    <sourceDirectory>C:\\MVN\\project\\src\\main\\java</sourceDirectory>\n    <scriptSourceDirectory>src/main/scripts</scriptSourceDirectory>\n    <testSourceDirectory>C:\\MVN\\project\\src\\test\\java</testSourceDirectory>\n    <outputDirectory>C:\\MVN\\project\\target\\classes</outputDirectory>\n    <testOutputDirectory>C:\\MVN\\project\\target\\test-classes</testOutputDirectory>\n    <resources>\n      <resource>\n        <mergeId>resource-0</mergeId>\n        <directory>C:\\MVN\\project\\src\\main\\resources</directory>\n      </resource>\n    </resources>\n    <testResources>\n      <testResource>\n        <mergeId>resource-1</mergeId>\n        <directory>C:\\MVN\\project\\src\\test\\resources</directory>\n      </testResource>\n    </testResources>\n    <directory>C:\\MVN\\project\\target</directory>\n    <finalName>project-1.0</finalName>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <artifactId>maven-antrun-plugin</artifactId>\n          <version>1.3</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-assembly-plugin</artifactId>\n          <version>2.2-beta-2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-clean-plugin</artifactId>\n          <version>2.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>2.0.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-dependency-plugin</artifactId>\n          <version>2.0</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-deploy-plugin</artifactId>\n          <version>2.4</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-ear-plugin</artifactId>\n          <version>2.3.1</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-ejb-plugin</artifactId>\n          <version>2.1</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-install-plugin</artifactId>\n          <version>2.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-jar-plugin</artifactId>\n          <version>2.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-javadoc-plugin</artifactId>\n          <version>2.5</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-plugin-plugin</artifactId>\n          <version>2.4.3</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-rar-plugin</artifactId>\n          <version>2.2</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-release-plugin</artifactId>\n          <version>2.0-beta-8</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-resources-plugin</artifactId>\n          <version>2.3</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-site-plugin</artifactId>\n          <version>2.0-beta-7</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-source-plugin</artifactId>\n          <version>2.0.4</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-surefire-plugin</artifactId>\n          <version>2.4.3</version>\n        </plugin>\n        <plugin>\n          <artifactId>maven-war-plugin</artifactId>\n          <version>2.1-alpha-2</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n    <plugins>\n      <plugin>\n        <artifactId>maven-help-plugin</artifactId>\n        <version>2.1.1</version>\n      </plugin>\n    </plugins>\n  </build>\n  <repositories>\n    <repository>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <id>central</id>\n      <name>Maven Repository Switchboard</name>\n      <url>http://repo1.maven.org/maven2</url>\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    <pluginRepository>\n      <releases>\n        <updatePolicy>never</updatePolicy>\n      </releases>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <id>central</id>\n      <name>Maven Plugin Repository</name>\n      <url>http://repo1.maven.org/maven2</url>\n    </pluginRepository>\n  </pluginRepositories>\n  <reporting>\n    <outputDirectory>C:\\MVN\\project\\target/site</outputDirectory>\n  </reporting>\n</project>\n```\n在上面的 pom.xml 中，你可以看到 Maven 在执行目标时需要用到的默认工程源码目录结构、输出目录、需要的插件、仓库和报表目录。\n\nMaven 的 pom.xml 文件也不需要手工编写。\n\nMaven 提供了大量的原型插件来创建工程，包括工程结构和 pom.xml。\n\n### 构建生命周期 ###\n\n#### 什么是构建生命周期 ####\n\n构建生命周期是一组阶段的序列（sequence of phases），每个阶段定义了目标被执行的顺序。这里的阶段是生命周期的一部分。\n\n举例说明，一个典型的 Maven 构建生命周期是由以下几个阶段的序列组成的：\n\n| 阶段              | 处理     | 描述                                                 |\n|-------------------|----------|------------------------------------------------------|\n| prepare-resources | 资源拷贝 | 本阶段可以自定义需要拷贝的资源                       |\n| compile           | 编译     | 本阶段完成源代码编译                                 |\n| package           | 打包     | 本阶段根据 pom.xml 中描述的打包配置创建 JAR / WAR 包 |\n| install           | 安装     | 本阶段在本地 / 远程仓库中安装工程包                  |\n\n当需要在某个特定阶段之前或之后执行目标时，可以使用 pre 和 post 来定义这个目标。\n\n当 Maven 开始构建工程，会按照所定义的阶段序列的顺序执行每个阶段注册的目标。Maven 有以下三个标准的生命周期：\n- clean\n- default(or build)\n- site\n\n**目标**表示一个特定的、对构建和管理工程有帮助的任务。它可能绑定了 0 个或多个构建阶段。没有绑定任何构建阶段的目标可以在构建生命周期之外被直接调用执行。\n\n执行的顺序依赖于目标和构建阶段被调用的顺序。例如，考虑下面的命令。clean 和 package 参数是构建阶段，而 dependency:copy-dependencies 是一个目标。\n\n\tmvn clean dependency:copy-dependencies package\n\n这里的 clean 阶段将会被首先执行，然后 dependency:copy-dependencies 目标会被执行，最终 package 阶段被执行。\n\n#### Clean 生命周期 ####\n\n当我们执行 mvn post-clean 命令时，Maven 调用 clean 生命周期，它包含以下阶段。\n- pre-clean\n- clean\n- post-clean\n\nMaven 的 clean 目标（clean:clean）绑定到了 clean 生命周期的 clean 阶段。它的 clean:clean 目标通过删除构建目录删除了构建输出。所以当 mvn clean 命令执行时，Maven 删除了构建目录。\n\n我们可以通过在上面的 clean 生命周期的任何阶段定义目标来修改这部分的操作行为。\n\n在下面的例子中，我们将 maven-antrun-plugin:run 目标添加到 pre-clean、clean 和 post-clean 阶段中。这样我们可以在 clean 生命周期的各个阶段显示文本信息。\n\n我们已经在 C:\\MVN\\project 目录下创建了一个 pom.xml 文件。\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<groupId>com.companyname.projectgroup</groupId>\n<artifactId>project</artifactId>\n<version>1.0</version>\n<build>\n<plugins>\n   <plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-antrun-plugin</artifactId>\n   <version>1.1</version>\n   <executions>\n      <execution>\n         <id>id.pre-clean</id>\n         <phase>pre-clean</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>pre-clean phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n      <execution>\n         <id>id.clean</id>\n         <phase>clean</phase>\n         <goals>\n          <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>clean phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n      <execution>\n         <id>id.post-clean</id>\n         <phase>post-clean</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>post-clean phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n   </executions>\n   </plugin>\n</plugins>\n</build>\n</project>\n```\n\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。\n\n\tC:\\MVN\\project>mvn post-clean\n\nMaven 将会开始处理并显示 clean 生命周期的所有阶段。\n```cmd\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------\n[INFO] Building Unnamed - com.companyname.projectgroup:project:jar:1.0\n[INFO]    task-segment: [post-clean]\n[INFO] ------------------------------------------------------------------\n[INFO] [antrun:run {execution: id.pre-clean}]\n[INFO] Executing tasks\n     [echo] pre-clean phase\n[INFO] Executed tasks\n[INFO] [clean:clean {execution: default-clean}]\n[INFO] [antrun:run {execution: id.clean}]\n[INFO] Executing tasks\n     [echo] clean phase\n[INFO] Executed tasks\n[INFO] [antrun:run {execution: id.post-clean}]\n[INFO] Executing tasks\n     [echo] post-clean phase\n[INFO] Executed tasks\n[INFO] ------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Sat Jul 07 13:38:59 IST 2012\n[INFO] Final Memory: 4M/44M\n[INFO] ------------------------------------------------------------------\n```\n你可以尝试修改 mvn clean 命令，来显示 pre-clean 和 clean，而在 post-clean 阶段不执行任何操作。\n\n#### Default (or Build) 生命周期 ####\n\n这是 Maven 的主要生命周期，被用于构建应用。包括下面的 23 个阶段。\n\n| 生命周期阶段          | 描述                                                                        |\n|-----------------------|-----------------------------------------------------------------------------|\n| validate              | 检查工程配置是否正确，完成构建过程的所有必要信息是否能够获取到。            |\n| initialize            | 初始化构建状态，例如设置属性。                                              |\n| generate-sources      | 生成编译阶段需要包含的任何源码文件。                                        |\n| process-sources       | 处理源代码，例如，过滤任何值（filter any value）。                          |\n| generate-resources    | 生成工程包中需要包含的资源文件。                                            |\n| process-resources     | 拷贝和处理资源文件到目的目录中，为打包阶段做准备。                          |\n| compile               | 编译工程源码。                                                              |\n| process-classes       | 处理编译生成的文件，例如 Java Class 字节码的加强和优化。                    |\n| generate-test-sources | 生成编译阶段需要包含的任何测试源代码。                                      |\n| process-test-sources  | 处理测试源代码，例如，过滤任何值（filter any values)。                      |\n| test-compile          | 编译测试源代码到测试目的目录。                                              |\n| process-test-classes  | 处理测试代码文件编译后生成的文件。                                          |\n| test                  | 使用适当的单元测试框架（例如JUnit）运行测试。                               |\n| prepare-package       | 在真正打包之前，为准备打包执行任何必要的操作。                              |\n| package               | 获取编译后的代码，并按照可发布的格式进行打包，例如 JAR、WAR 或者 EAR 文件。 |\n| pre-integration-test  | 在集成测试执行之前，执行所需的操作。例如，设置所需的环境变量。              |\n| integration-test      | 处理和部署必须的工程包到集成测试能够运行的环境中。                          |\n| post-integration-test | 在集成测试被执行后执行必要的操作。例如，清理环境。                          |\n| verify                | 运行检查操作来验证工程包是有效的，并满足质量要求。                          |\n| install               | 安装工程包到本地仓库中，该仓库可以作为本地其他工程的依赖。                  |\n| deploy                | 拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程。                  |\n\n有一些与 Maven 生命周期相关的重要概念需要说明：\n\n当一个阶段通过 Maven 命令调用时，例如 mvn compile，只有该阶段之前以及包括该阶段在内的所有阶段会被执行。\n\n不同的 maven 目标将根据打包的类型（JAR / WAR / EAR），被绑定到不同的 Maven 生命周期阶段。\n\n在下面的例子中，我们将 maven-antrun-plugin:run 目标添加到 Build 生命周期的一部分阶段中。这样我们可以显示生命周期的文本信息。\n\n我们已经更新了 C:\\MVN\\project 目录下的 pom.xml 文件。\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n  http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<groupId>com.companyname.projectgroup</groupId>\n<artifactId>project</artifactId>\n<version>1.0</version>\n<build>\n<plugins>\n<plugin>\n<groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-antrun-plugin</artifactId>\n<version>1.1</version>\n<executions>\n   <execution>\n      <id>id.validate</id>\n      <phase>validate</phase>\n      <goals>\n         <goal>run</goal>\n      </goals>\n      <configuration>\n         <tasks>\n            <echo>validate phase</echo>\n         </tasks>\n      </configuration>\n   </execution>\n   <execution>\n      <id>id.compile</id>\n      <phase>compile</phase>\n      <goals>\n         <goal>run</goal>\n      </goals>\n      <configuration>\n         <tasks>\n            <echo>compile phase</echo>\n         </tasks>\n      </configuration>\n   </execution>\n   <execution>\n      <id>id.test</id>\n      <phase>test</phase>\n      <goals>\n         <goal>run</goal>\n      </goals>\n      <configuration>\n         <tasks>\n            <echo>test phase</echo>\n         </tasks>\n      </configuration>\n   </execution>\n   <execution>\n         <id>id.package</id>\n         <phase>package</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n         <tasks>\n            <echo>package phase</echo>\n         </tasks>\n      </configuration>\n   </execution>\n   <execution>\n      <id>id.deploy</id>\n      <phase>deploy</phase>\n      <goals>\n         <goal>run</goal>\n      </goals>\n      <configuration>\n      <tasks>\n         <echo>deploy phase</echo>\n      </tasks>\n      </configuration>\n   </execution>\n</executions>\n</plugin>\n</plugins>\n</build>\n</project>\n```\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行以下 mvn 命令。\n\n\tC:\\MVN\\project>mvn compile\n\nMaven 将会开始处理并显示直到编译阶段的构建生命周期的各个阶段。\n```cmd\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------\n[INFO] Building Unnamed - com.companyname.projectgroup:project:jar:1.0\n[INFO]    task-segment: [compile]\n[INFO] ------------------------------------------------------------------\n[INFO] [antrun:run {execution: id.validate}]\n[INFO] Executing tasks\n     [echo] validate phase\n[INFO] Executed tasks\n[INFO] [resources:resources {execution: default-resources}]\n[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n[INFO] skip non existing resourceDirectory C:\\MVN\\project\\src\\main\\resources\n[INFO] [compiler:compile {execution: default-compile}]\n[INFO] Nothing to compile - all classes are up to date\n[INFO] [antrun:run {execution: id.compile}]\n[INFO] Executing tasks\n     [echo] compile phase\n[INFO] Executed tasks\n[INFO] ------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------\n[INFO] Total time: 2 seconds\n[INFO] Finished at: Sat Jul 07 20:18:25 IST 2012\n[INFO] Final Memory: 7M/64M\n[INFO] ------------------------------------------------------------------\n```\n\n#### Site 生命周期 ####\n\nMaven Site 插件一般用来创建新的报告文档、部署站点等。\n\n阶段：\n- pre-site\n- site\n- post-site\n- site-deploy\n\n在下面的例子中，我们将 maven-antrun-plugin:run 目标添加到 Site 生命周期的所有阶段中。这样我们可以显示生命周期的所有文本信息。\n\n我们已经更新了 C:\\MVN\\project 目录下的 pom.xml 文件。\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n  http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<groupId>com.companyname.projectgroup</groupId>\n<artifactId>project</artifactId>\n<version>1.0</version>\n<build>\n<plugins>\n<plugin>\n<groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-antrun-plugin</artifactId>\n<version>1.1</version>\n   <executions>\n      <execution>\n         <id>id.pre-site</id>\n         <phase>pre-site</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>pre-site phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n      <execution>\n         <id>id.site</id>\n         <phase>site</phase>\n         <goals>\n         <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>site phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n      <execution>\n         <id>id.post-site</id>\n         <phase>post-site</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>post-site phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n      <execution>\n         <id>id.site-deploy</id>\n         <phase>site-deploy</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>site-deploy phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n   </executions>\n</plugin>\n</plugins>\n</build>\n</project>\n```\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行以下 mvn 命令。\n\n\tC:\\MVN\\project>mvn site\n\nMaven 将会开始处理并显示直到 site 阶段的 site 生命周期的各个阶段。\n```cmd\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------\n[INFO] Building Unnamed - com.companyname.projectgroup:project:jar:1.0\n[INFO]    task-segment: [site]\n[INFO] ------------------------------------------------------------------\n[INFO] [antrun:run {execution: id.pre-site}]\n[INFO] Executing tasks\n     [echo] pre-site phase\n[INFO] Executed tasks\n[INFO] [site:site {execution: default-site}]\n[INFO] Generating \"About\" report.\n[INFO] Generating \"Issue Tracking\" report.\n[INFO] Generating \"Project Team\" report.\n[INFO] Generating \"Dependencies\" report.\n[INFO] Generating \"Project Plugins\" report.\n[INFO] Generating \"Continuous Integration\" report.\n[INFO] Generating \"Source Repository\" report.\n[INFO] Generating \"Project License\" report.\n[INFO] Generating \"Mailing Lists\" report.\n[INFO] Generating \"Plugin Management\" report.\n[INFO] Generating \"Project Summary\" report.\n[INFO] [antrun:run {execution: id.site}]\n[INFO] Executing tasks\n     [echo] site phase\n[INFO] Executed tasks\n[INFO] ------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------\n[INFO] Total time: 3 seconds\n[INFO] Finished at: Sat Jul 07 15:25:10 IST 2012\n[INFO] Final Memory: 24M/149M\n[INFO] ------------------------------------------------------------------\n```\n\n### 构建配置文件 ###\n\n#### 什么是构建配置文件？ ####\n\n构建配置文件是一组配置的集合，用来设置或者覆盖 Maven 构建的默认配置。使用构建配置文件，可以为不同的环境定制构建过程，例如 Producation 和 Development 环境。\n\nProfile 在 pom.xml 中使用 activeProfiles / profiles 元素指定，并且可以用很多方式触发。Profile 在构建时修改 POM，并且为变量设置不同的目标环境（例如，在开发、测试和产品环境中的数据库服务器路径）。\n\n#### Profile 类型 ####\n\nProfile 主要有三种类型。\n\n| 类型        | 在哪里定义                                                       |\n|-------------|------------------------------------------------------------------|\n| Per Project | 定义在工程 POM 文件 pom.xml 中                                   |\n| Per User    | 定义在 Maven 设置 xml 文件中 （%USER_HOME%/.m2/settings.xml）    |\n| Global      | 定义在 Maven 全局配置 xml 文件中 （%M2_HOME%/conf/settings.xml） |\n\n#### Profile 激活 ####\n\nMaven 的 Profile 能够通过几种不同的方式激活。\n- 显式使用命令控制台输入\n- 通过 maven 设置\n- 基于环境变量（用户 / 系统变量）\n- 操作系统配置（例如，Windows family）\n- 现存 / 缺失 文件\n\n#### Profile 激活示例 ####\n\n我们假定你的工程目录像下面这样：\n![](http://wiki.jikexueyuan.com/project/maven/images/6-structure.png)\n\n现在，在 src/main/resources 目录下有三个环境配置文件：\n\n| 文件名称            | 描述                         |\n|---------------------|------------------------------|\n| env.properties      | 没有配置文件时的默认配置     |\n| env.test.properties | 使用测试配置文件时的测试配置 |\n| env.prod.properties | 使用产品配置文件时的产品配置 |\n\n#### 显式 Profile 激活 ####\n\n在接下来的例子中，我们将 attach maven-antrun-plugin:run 目标添加到测试阶段中。这样可以我们在不同的 Profile 中输出文本信息。我们将使用 pom.xml 来定义不同的 Profile，并在命令控制台中使用 maven 命令激活 Profile。\n\n假定，我们在 C:\\MVN\\project 目录下创建了以下的 pom.xml 文件。\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>com.companyname.projectgroup</groupId>\n   <artifactId>project</artifactId>\n   <version>1.0</version>\n   <profiles>\n      <profile>\n      <id>test</id>\n      <build>\n      <plugins>\n         <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-antrun-plugin</artifactId>\n            <version>1.1</version>\n            <executions>\n               <execution>\n                  <phase>test</phase>\n                  <goals>\n                     <goal>run</goal>\n                  </goals>\n                  <configuration>\n                  <tasks>\n                     <echo>Using env.test.properties</echo>\n            <copy file=\"src/main/resources/env.test.propertiestofile\n            =\"${project.build.outputDirectory}/env.properties\"/>\n                  </tasks>\n                  </configuration>\n               </execution>\n            </executions>\n         </plugin>\n      </plugins>\n      </build>\n      </profile>\n   </profiles>\n</project>\n```\n\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行以下 mvn 命令。使用 -P 选项指定 Profile 的名称。\n\n\tC:\\MVN\\project>mvn test -Ptest\n\nMaven 将开始处理并显示 test Profile 的结果。\n\n```cmd\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------\n[INFO] Building Unnamed - com.companyname.projectgroup:project:jar:1.0\n[INFO]    task-segment: [test]\n[INFO] ------------------------------------------------------------------\n[INFO] [resources:resources {execution: default-resources}]\n[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n[INFO] Copying 3 resources\n[INFO] [compiler:compile {execution: default-compile}]\n[INFO] Nothing to compile - all classes are up to date\n[INFO] [resources:testResources {execution: default-testResources}]\n[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,\ni.e. build is platform dependent!\n[INFO] skip non existing resourceDirectory C:\\MVN\\project\\src\\test\\resources\n[INFO] [compiler:testCompile {execution: default-testCompile}]\n[INFO] Nothing to compile - all classes are up to date\n[INFO] [surefire:test {execution: default-test}]\n[INFO] Surefire report directory: C:\\MVN\\project\\target\\surefire-reports\n\n-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nThere are no tests to run.\n\nResults :\n\nTests run: 0, Failures: 0, Errors: 0, Skipped: 0\n\n[INFO] [antrun:run {execution: default}]\n[INFO] Executing tasks\n     [echo] Using env.test.properties\n[INFO] Executed tasks\n[INFO] ------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------\n[INFO] Total time: 1 second\n[INFO] Finished at: Sun Jul 08 14:55:41 IST 2012\n[INFO] Final Memory: 8M/64M\n[INFO] ------------------------------------------------------------------\n```\n\n现在我们练习一下，你可以按照下面的步骤做：\n- 在 pom.xml 的 profiles 元素中添加另一个 profile 元素（拷贝已有的 profile 元素并粘贴到 profiles 元素结尾）。\n- 将此 profile 元素的 id 从 test 修改为 normal。\n- 将任务部分修改为 echo env.properties，以及 copy env.properties 到目标目录\n- 再次重复以上三个步骤，修改 id 为 prod，修改 task 部分为 env.prod.properties\n- 全部就这些了。现在你有了三个构建配置文件（normal / test / prod）。\n\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。使用 -P 选项指定 Profile 的名称。\n\n\tC:\\MVN\\project>mvn test -Pnormal\n\tC:\\MVN\\project>mvn test -Pprod\n\n检查构建的输出看看有什么不同。\n\n#### 通过 Maven 设置激活 Profile ####\n\n打开 Maven 的 settings.xml 文件，该文件可以在 %USER_HOME%/.m2 目录下找到，%USER_HOME% 表示用户主目录。如果 settings.xml 文件不存在则需要创建一个。\n\n像在下面例子中展示的一样，使用 activeProfiles 节点添加 test 配置作为激活的 Profile。\n```xml\n<settings xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n   <mirrors>\n      <mirror>\n         <id>maven.dev.snaponglobal.com</id>\n         <name>Internal Artifactory Maven repository</name>\n         <url>http://repo1.maven.org/maven2/</url>\n         <mirrorOf>*</mirrorOf>\n      </mirror>\n   </mirrors>\n   <activeProfiles>\n      <activeProfile>test</activeProfile>\n   </activeProfiles>\n</settings>\n```\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。不要使用 -P 选项指定 Profile 的名称。Maven 将显示被激活的 test Profile 的结果。\n\n\tC:\\MVN\\project>mvn test\n\n#### 通过环境变量激活 Profile ####\n\n现在从 maven 的 settings.xml 中删除激活的 Profile，并更新 pom.xml 中的 test Profile。将下面的内容添加到 profile 元素的 activation 元素中。\n\n当系统属性 “env” 被设置为 “test” 时，test 配置将会被触发。创建一个环境变量 “env” 并设置它的值为 “test”。\n\n```xml\n<profile>\n   <id>test</id>\n   <activation>\n      <property>\n         <name>env</name>\n         <value>test</value>\n      </property>\n   </activation>\n</profile>\n```\n\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。\n\n\tC:\\MVN\\project>mvn test\n\n#### 通过操作系统激活 Profile ####\n\nactivation 元素包含下面的操作系统信息。当系统为 windows XP 时，test Profile 将会被触发。\n```xml\n<profile>\n   <id>test</id>\n   <activation>\n      <os>\n         <name>Windows XP</name>\n         <family>Windows</family>\n         <arch>x86</arch>\n         <version>5.1.2600</version>\n      </os>\n   </activation>\n</profile>\n```\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。不要使用 -P 选项指定 Profile 的名称。Maven 将显示被激活的 test Profile 的结果。\n\n\tC:\\MVN\\project>mvn test\n\n#### 通过现存 / 缺失的文件激活 Profile ####\n\n现在使用 activation 元素包含下面的操作系统信息。\n当 target/generated-sources/axistools/wsdl2java/com/companyname/group 缺失时，test Profile 将会被触发。\n```xml\n<profile>\n   <id>test</id>\n   <activation>\n      <file>\n         <missing>target/generated-sources/axistools/wsdl2java/\n         com/companyname/group</missing>\n      </file>\n   </activation>\n</profile>\n```\n\n现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。不要使用 -P 选项指定 Profile 的名称。Maven 将显示被激活的 test Profile 的结果。\n\n\tC:\\MVN\\project>mvn test\n\n### 仓库 ###\n\n#### 什么是 Maven 仓库？ ####\n\n在 Maven 的术语中，仓库是一个位置（place），例如目录，可以存储所有的工程 jar 文件、library jar 文件、插件或任何其他的工程指定的文件。\n\nMaven 仓库有三种类型：\n- 本地（local）\n- 中央（central）\n- 远程（remote）\n\n#### 本地仓库 ####\n\nMaven 本地仓库是机器上的一个文件夹。它在你第一次运行任何 maven 命令的时候创建。\n\nMaven 本地仓库保存你的工程的所有依赖（library jar、plugin jar 等）。当你运行一次 Maven 构建，Maven 会自动下载所有依赖的 jar 文件到本地仓库中。它避免了每次构建时都引用存放在远程机器上的依赖文件。\n\nMaven 本地仓库默认被创建在 %USER_HOME% 目录下。要修改默认位置，在 %M2_HOME%\\conf 目录中的 Maven 的 settings.xml 文件中定义另一个路径。\n```xml\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 \n   http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n      <localRepository>C:/MyLocalRepository</localRepository>\n</settings>\n```\n当你运行 Maven 命令，Maven 将下载依赖的文件到你指定的路径中。\n\n#### 中央仓库 ####\n\nMaven 中央仓库是由 Maven 社区提供的仓库，其中包含了大量常用的库。\n中央仓库的关键概念：\n- 这个仓库由 Maven 社区管理。\n- 不需要配置。\n- 需要通过网络才能访问。\n\n要浏览中央仓库的内容，maven 社区提供了一个 URL：[http://search.maven.org/#browse](http://search.maven.org/#browse \"http://search.maven.org/#browse\")。使用这个仓库，开发人员可以搜索所有可以获取的代码库。\n\n#### 远程仓库 ####\n\n如果 Maven 在中央仓库中也找不到依赖的库文件，它会停止构建过程并输出错误信息到控制台。为避免这种情况，Maven 提供了远程仓库的概念，它是开发人员自己定制仓库，包含了所需要的代码库或者其他工程中用到的 jar 文件。\n\n举例说明，使用下面的 POM.xml，Maven 将从远程仓库中下载该 pom.xml 中声明的所依赖的（在中央仓库中获取不到的）文件。\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>com.companyname.projectgroup</groupId>\n   <artifactId>project</artifactId>\n   <version>1.0</version>\n   <dependencies>\n      <dependency>\n         <groupId>com.companyname.common-lib</groupId>\n         <artifactId>common-lib</artifactId>\n         <version>1.0.0</version>\n      </dependency>\n   <dependencies>\n   <repositories>\n      <repository>\n         <id>companyname.lib1</id>\n         <url>http://download.companyname.org/maven2/lib1</url>\n      </repository>\n      <repository>\n         <id>companyname.lib2</id>\n         <url>http://download.companyname.org/maven2/lib2</url>\n      </repository>\n   </repositories>\n</project>\n```\n\n#### Maven 依赖搜索顺序 ####\n\n当我们执行 Maven 构建命令时，Maven 开始按照以下顺序查找依赖的库：\n- 步骤 1 － 在本地仓库中搜索，如果找不到，执行步骤 2，如果找到了则执行其他操作。\n- 步骤 2 － 在中央仓库中搜索，如果找不到，并且有一个或多个远程仓库已经设置，则执行步骤 4，如果找到了则下载到本地仓库中已被将来引用。\n- 步骤 3 － 如果远程仓库没有被设置，Maven 将简单的停滞处理并抛出错误（无法找到依赖的文件）。\n- 步骤 4 － 在一个或多个远程仓库中搜索依赖的文件，如果找到则下载到本地仓库已被将来引用，否则 Maven 将停止处理并抛出错误（无法找到依赖的文件）。\n\n### 插件 ###\n\n#### 什么是 Maven 插件？ ####\n\nMaven 实际上是一个依赖插件执行的框架，每个任务实际上是由插件完成。Maven 插件通常被用来：\n- 创建 jar 文件\n- 创建 war 文件\n- 编译代码文件\n- 代码单元测试\n- 创建工程文档\n- 创建工程报告\n\n插件通常提供了一个目标的集合，并且可以使用下面的语法执行：\n\n\tmvn [plugin-name]:[goal-name]\n\n例如，一个 Java 工程可以使用 maven-compiler-plugin 的 compile-goal 编译，使用以下命令：\n\n\tmvn compiler:compile\n\n#### 插件类型 ####\n\nMaven 提供了下面两种类型的插件：\n\n| 类型              | 描述                                               |\n|-------------------|----------------------------------------------------|\n| Build plugins     | 在构建时执行，并在 pom.xml 的 元素中配置。         |\n| Reporting plugins | 在网站生成过程中执行，并在 pom.xml 的 元素中配置。 |\n\n下面是一些常用插件的列表：\n\n| 插件     | 描述                                                |\n|----------|-----------------------------------------------------|\n| clean    | 构建之后清理目标文件。删除目标目录。                |\n| compiler | 编译 Java 源文件。                                  |\n| surefile | 运行 JUnit 单元测试。创建测试报告。                 |\n| jar      | 从当前工程中构建 JAR 文件。                         |\n| war      | 从当前工程中构建 WAR 文件。                         |\n| javadoc  | 为工程生成 Javadoc。                                |\n| antrun   | 从构建过程的任意一个阶段中运行一个 ant 任务的集合。 |\n\n#### 例子 ####\n\n我们已经在我们的例子中大量使用了 **maven-antrun-plugin** 来输出数据到控制台上。请查看 **Maven - 构建配置文件** 章节。让我们用一种更好的方式理解这部分内容，在 C:\\MVN\\project 目录下创建一个 pom.xml 文件。\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n    http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<groupId>com.companyname.projectgroup</groupId>\n<artifactId>project</artifactId>\n<version>1.0</version>\n<build>\n<plugins>\n   <plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-antrun-plugin</artifactId>\n   <version>1.1</version>\n   <executions>\n      <execution>\n         <id>id.clean</id>\n         <phase>clean</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>clean phase</echo>\n            </tasks>\n         </configuration>\n      </execution>     \n   </executions>\n   </plugin>\n</plugins>\n</build>\n</project>\n```\n接下来，打开命令终端跳转到 pom.xml 所在的目录，并执行下面的 mvn 命令。\n\n\tC:\\MVN\\project>mvn clean\n\nMaven 将开始处理并显示 clean 生命周期的 clean 阶段。\n```cmd\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------\n[INFO] Building Unnamed - com.companyname.projectgroup:project:jar:1.0\n[INFO]    task-segment: [post-clean]\n[INFO] ------------------------------------------------------------------\n[INFO] [clean:clean {execution: default-clean}]\n[INFO] [antrun:run {execution: id.clean}]\n[INFO] Executing tasks\n     [echo] clean phase\n[INFO] Executed tasks\n[INFO] ------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------\n[INFO] Total time: < 1 second\n[INFO] Finished at: Sat Jul 07 13:38:59 IST 2012\n[INFO] Final Memory: 4M/44M\n[INFO] ------------------------------------------------------------------\n```\n上面的例子展示了以下关键概念：\n- 插件是在 pom.xml 中使用 plugins 元素定义的。\n- 每个插件可以有多个目标。\n- 你可以定义阶段，插件会使用它的 phase 元素开始处理。我们已经使用了 **clean** 阶段。\n- 你可以通过绑定到插件的目标的方式来配置要执行的任务。我们已经绑定了 **echo** 任务到 maven-antrun-plugin 的 **run** 目标。\n- 就是这样，Maven 将处理剩下的事情。它将下载本地仓库中获取不到的插件，并开始处理。\n\n### 创建工程 ###\n\nMaven 使用原型（archetype）插件创建工程。要创建一个简单的 Java 应用，我们将使用 maven-archetype-quickstart 插件。在下面的例子中，我们将在 C:\\MVN 文件夹下创建一个基于 maven 的 java 应用工程。\n\n我们打开命令控制台，跳转到 C:\\MVN 目录，并执行下面的 mvn 命令。\n```cmd\nC:\\MVN>mvn archetype:generate\n-DgroupId=com.companyname.bank \n-DartifactId=consumerBanking \n-DarchetypeArtifactId=maven-archetype-quickstart \n-DinteractiveMode=false\n```\nMaven 将开始处理，并将创建完成的 java 应用工程结构。\n```cmd\nINFO] Scanning for projects...\n[INFO] Searching repository for plugin with prefix: 'archetype'.\n[INFO] -------------------------------------------------------------------\n[INFO] Building Maven Default Project\n[INFO]    task-segment: [archetype:generate] (aggregator-style)\n[INFO] -------------------------------------------------------------------\n[INFO] Preparing archetype:generate\n[INFO] No goals needed for project - skipping\n[INFO] [archetype:generate {execution: default-cli}]\n[INFO] Generating project in Batch mode\n[INFO] -------------------------------------------------------------------\n[INFO] Using following parameters for creating project \n from Old (1.x) Archetype: maven-archetype-quickstart:1.0\n[INFO] -------------------------------------------------------------------\n[INFO] Parameter: groupId, Value: com.companyname.bank\n[INFO] Parameter: packageName, Value: com.companyname.bank\n[INFO] Parameter: package, Value: com.companyname.bank\n[INFO] Parameter: artifactId, Value: consumerBanking\n[INFO] Parameter: basedir, Value: C:\\MVN\n[INFO] Parameter: version, Value: 1.0-SNAPSHOT\n[INFO] project created from Old (1.x) Archetype in dir: C:\\MVN\\consumerBanking\n[INFO] ------------------------------------------------------------------\n[INFO] BUILD SUCCESSFUL\n[INFO] ------------------------------------------------------------------\n[INFO] Total time: 14 seconds\n[INFO] Finished at: Tue Jul 10 15:38:58 IST 2012\n[INFO] Final Memory: 21M/124M\n[INFO] ------------------------------------------------------------------\n```\n现在跳转到 C:/MVN 目录。有将看到一个名为 consumerBanking 的 java 应用工程（就像在 artifactId 中设定的一样）。Maven 使用一套标准的目录结构，就像这样：\n![](http://wiki.jikexueyuan.com/project/maven/images/9-project-structure.jpg)\n使用上面的例子，我们可以知道下面几个关键概念：\n\n| 文件夹结构             | 描述                                                                  |\n|------------------------|-----------------------------------------------------------------------|\n| consumerBanking        | 包含 src 文件夹和 pom.xml                                             |\n| src/main/java contains | java 代码文件在包结构下（com/companyName/bank）。                     |\n| src/main/test contains | 测试代码文件在包结构下（com/companyName/bank）。                      |\n| src/main/resources     | 包含了 图片 / 属性 文件（在上面的例子中，我们需要手动创建这个结构）。 |\n\nMaven 也创建了一个简单的 Java 源文件和 Java 测试文件。打开 \nC:\\MVN\\consumerBanking\\src\\main\\java\\com\\companyname\\bank 文件夹，可以看到 App.java 文件。\n```java\npackage com.companyname.bank;\n\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static void main( String[] args )\n    {\n        System.out.println( \"Hello World!\" );\n    }\n}\n```\n打开 C:\\MVN\\consumerBanking\\src\\test\\java\\com\\companyname\\bank 文件夹，可以看到 AppTest.java。\n```java\npackage com.companyname.bank;\n\nimport junit.framework.Test;\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\n/**\n * Unit test for simple App.\n */\npublic class AppTest extends TestCase \n{\n    /**\n     * Create the test case\n     *\n     * @param testName name of the test case\n     */\n    public AppTest( String testName )\n    {\n        super( testName );\n    }\n\n    /**\n     * @return the suite of tests being tested\n     */\n    public static Test suite()\n    {\n        return new TestSuite( AppTest.class );\n    }\n\n    /**\n     * Rigourous Test :-)\n     */\n    public void testApp()\n    {\n        assertTrue( true );\n    }\n}\n```\n开发人员需要将他们的文件按照上面表格中提到的结构放置好，接下来 Maven 将会搞定所有构建相关的复杂任务。\n\n### 构建 & 测试工程 ###\n\n\n\n### 外部依赖 ###\n\n### 工程文档 ###\n\n### 工程模板 ###\n\n### 快照 ###\n\n### 构建自动化 ###\n\n### 管理依赖 ###\n\n### 自动化部署 ###\n\n### Web应用 ###\n\n### Eclipse IDE ###\n\n### NetBeans ###\n\n### IntelliJ IDEA ###\n\n***转载自[极客学院](http://wiki.jikexueyuan.com/project/maven/ \"极客学院\")***","slug":"Maven","published":1,"updated":"2016-02-26T08:00:57.012Z","layout":"post","photos":[],"link":"","_id":"civai9ybt000ji4v5oswdofv3","sticky":0},{"title":"Maven构建时提示jdk中lib包中的类不存在","comments":1,"date":"2016-02-24T05:47:35.000Z","_content":"\n### 问题描述 ###\n有时候maven构建时会碰到提示jdk中的类找不到的情况\n\n### 解决办法 ###\n1. 确定提示miss的类在jdk的哪个jar包中\n2. 配置pom.xml（假设确定的jar包是rt.jar和charsets.jar）\n\n```xml\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-compiler-plugin</artifactId>\n\t<version>3.0</version>\n\t<configuration>\n\t\t<source>1.6</source>\n\t\t<target>1.6</target>\n\t\t<encoding>${project.build.sourceEncoding}</encoding>\n\t\t<compilerArguments>\n\t\t\t<verbose />\n\t\t\t<bootclasspath>${JAVA_HOME}\\jre\\lib\\rt.jar;${JAVA_HOME}\\jre\\lib\\charsets.jar</bootclasspath>\n\t\t</compilerArguments>\n\t</configuration>\n</plugin>\n```\n\n***如果还有其他jar中的类提示miss，用分号分割，继续添加***","source":"_posts/2016-02-24-Maven遇到的问题.md","raw":"---\ntitle: Maven构建时提示jdk中lib包中的类不存在\ncomments: true\ndate: 2016-02-24 13:47:35\ncategories:\n\t- 开发问题 \ntags:\n\t- Java\n\t- Maven\n---\n\n### 问题描述 ###\n有时候maven构建时会碰到提示jdk中的类找不到的情况\n\n### 解决办法 ###\n1. 确定提示miss的类在jdk的哪个jar包中\n2. 配置pom.xml（假设确定的jar包是rt.jar和charsets.jar）\n\n```xml\n<plugin>\n\t<groupId>org.apache.maven.plugins</groupId>\n\t<artifactId>maven-compiler-plugin</artifactId>\n\t<version>3.0</version>\n\t<configuration>\n\t\t<source>1.6</source>\n\t\t<target>1.6</target>\n\t\t<encoding>${project.build.sourceEncoding}</encoding>\n\t\t<compilerArguments>\n\t\t\t<verbose />\n\t\t\t<bootclasspath>${JAVA_HOME}\\jre\\lib\\rt.jar;${JAVA_HOME}\\jre\\lib\\charsets.jar</bootclasspath>\n\t\t</compilerArguments>\n\t</configuration>\n</plugin>\n```\n\n***如果还有其他jar中的类提示miss，用分号分割，继续添加***","slug":"Maven遇到的问题","published":1,"updated":"2016-02-24T05:54:55.007Z","layout":"post","photos":[],"link":"","_id":"civai9ybw000mi4v5wtmrp0i6","sticky":0},{"title":"装饰模式","comments":1,"date":"2016-02-23T08:36:47.000Z","_content":"\n### 什么是装饰模式？ ###\n动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。","source":"_posts/2016-02-23-装饰模式.md","raw":"---\ntitle: 装饰模式\ncomments: true\ndate: 2016-02-23 16:36:47\ncategories:\n\t- 设计模式\ntags:\n\t- Java\n\t- 设计模式\n---\n\n### 什么是装饰模式？ ###\n动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。","slug":"装饰模式","published":1,"updated":"2016-02-23T08:39:14.552Z","layout":"post","photos":[],"link":"","_id":"civai9yc0000si4v5pvofdf4q","sticky":0},{"title":"代理模式","comments":1,"date":"2016-02-23T01:59:46.000Z","_content":"\n### 什么是代理模式？ ###\n为其他对象提供一种代理以控制对这个对象的访问。\n\n### 举个例子 ###\n\n","source":"_posts/2016-02-23-代理模式.md","raw":"---\ntitle: 代理模式\ncomments: true\ndate: 2016-02-23 09:59:46\ncategories:\n\t- 设计模式\ntags:\n\t- Java\n\t- 设计模式\n---\n\n### 什么是代理模式？ ###\n为其他对象提供一种代理以控制对这个对象的访问。\n\n### 举个例子 ###\n\n","slug":"代理模式","published":1,"updated":"2016-02-23T08:37:48.904Z","layout":"post","photos":[],"link":"","_id":"civai9yc3000yi4v5jxkh5j6z","sticky":0}],"PostAsset":[],"PostCategory":[{"post_id":"civai9ybi0009i4v5iwnbvuwc","category_id":"civai9ybj000ai4v57mdmg7n7","_id":"civai9ybl000di4v5o4iaaq9m"},{"post_id":"civai9ybw000mi4v5wtmrp0i6","category_id":"civai9ybx000ni4v5s1dlds6l","_id":"civai9ybz000qi4v5nvn6wks7"},{"post_id":"civai9yc0000si4v5pvofdf4q","category_id":"civai9yc1000ti4v5ocuo302j","_id":"civai9yc2000wi4v5tkqsdaou"},{"post_id":"civai9yc3000yi4v5jxkh5j6z","category_id":"civai9yc1000ti4v5ocuo302j","_id":"civai9yc5000zi4v5493o1y9q"}],"PostTag":[{"post_id":"civai9yb20003i4v5xbttu0ai","tag_id":"civai9yb70004i4v5rdfvkiga","_id":"civai9yba0005i4v5iuekwh1q"},{"post_id":"civai9ybc0006i4v5r9o8e27o","tag_id":"civai9yb70004i4v5rdfvkiga","_id":"civai9ybd0007i4v5yf8p07n2"},{"post_id":"civai9ybi0009i4v5iwnbvuwc","tag_id":"civai9ybk000bi4v5hvlmvo7r","_id":"civai9ybl000ci4v5yi1qnijt"},{"post_id":"civai9ybn000ei4v5rfa5qroi","tag_id":"civai9ybo000fi4v5f3s0rswz","_id":"civai9ybp000gi4v5tp5z1512"},{"post_id":"civai9ybq000hi4v5v5npnsbh","tag_id":"civai9ybo000fi4v5f3s0rswz","_id":"civai9ybr000ii4v5fka8bszq"},{"post_id":"civai9ybt000ji4v5oswdofv3","tag_id":"civai9ybu000ki4v57zixyrk5","_id":"civai9ybv000li4v5w3ukkov0"},{"post_id":"civai9ybw000mi4v5wtmrp0i6","tag_id":"civai9yby000oi4v58pisjmna","_id":"civai9yby000pi4v59fadfh7t"},{"post_id":"civai9ybw000mi4v5wtmrp0i6","tag_id":"civai9ybu000ki4v57zixyrk5","_id":"civai9ybz000ri4v5wb6rhol6"},{"post_id":"civai9yc0000si4v5pvofdf4q","tag_id":"civai9yby000oi4v58pisjmna","_id":"civai9yc2000vi4v5ckk7vdeb"},{"post_id":"civai9yc0000si4v5pvofdf4q","tag_id":"civai9yc1000ui4v5ndbznxs1","_id":"civai9yc2000xi4v5peczbrt5"},{"post_id":"civai9yc3000yi4v5jxkh5j6z","tag_id":"civai9yby000oi4v58pisjmna","_id":"civai9yc60010i4v5s6w71znd"},{"post_id":"civai9yc3000yi4v5jxkh5j6z","tag_id":"civai9yc1000ui4v5ndbznxs1","_id":"civai9yc60011i4v5tbhc9pg0"}],"Tag":[{"name":"编程题","_id":"civai9yb70004i4v5rdfvkiga"},{"name":"算法","_id":"civai9ybk000bi4v5hvlmvo7r"},{"name":"小工具","_id":"civai9ybo000fi4v5f3s0rswz"},{"name":"Maven","_id":"civai9ybu000ki4v57zixyrk5"},{"name":"Java","_id":"civai9yby000oi4v58pisjmna"},{"name":"设计模式","_id":"civai9yc1000ui4v5ndbznxs1"}]}}